<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiraAPI</name>
    </assembly>
    <members>
        <member name="T:MiraAPI.Colors.CustomColor">
            <summary>
            Represents a custom color with a main color and a shadow color.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="mainColor">The main color.</param>
            <param name="shadowColor">The shadow color.</param>
        </member>
        <member name="M:MiraAPI.Colors.CustomColor.#ctor(StringNames,UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Represents a custom color with a main color and a shadow color.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="mainColor">The main color.</param>
            <param name="shadowColor">The shadow color.</param>
        </member>
        <member name="P:MiraAPI.Colors.CustomColor.MainColor">
            <summary>
            Gets the main color.
            </summary>
        </member>
        <member name="P:MiraAPI.Colors.CustomColor.ShadowColor">
            <summary>
            Gets the shadow color.
            </summary>
        </member>
        <member name="P:MiraAPI.Colors.CustomColor.Name">
            <summary>
            Gets the name of the color.
            </summary>
        </member>
        <member name="M:MiraAPI.Colors.CustomColor.#ctor(StringNames,UnityEngine.Color32)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Colors.CustomColor.#ctor(System.String,UnityEngine.Color32)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Colors.CustomColor.#ctor(System.String,UnityEngine.Color32,UnityEngine.Color32)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Colors.PaletteManager">
            <summary>
            Used to register and track custom colors.
            </summary>
        </member>
        <member name="P:MiraAPI.Colors.PaletteManager.RegisteredColors">
            <summary>
            Gets all registered custom colors.
            </summary>
        </member>
        <member name="T:MiraAPI.Colors.RegisterCustomColorsAttribute">
            <summary>
            Used to mark a class for custom colors registration.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.MiraCancelableEvent">
            <summary>
            Abstract class for Mira Events that can be cancelled.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.MiraCancelableEvent.IsCancelled">
            <summary>
            Gets a value indicating whether the event is cancelled.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.MiraCancelableEvent.Cancel">
            <summary>
            Cancels the event.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.MiraCancelableEvent.UnCancel">
            <summary>
            Uncancels the event.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.MiraEvent">
            <summary>
            Abstract class for Mira Events.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.MiraEventManager">
            <summary>
            Mira Event manager.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.MiraEventManager.InvokeEvent``1(``0)">
            <summary>
            Invoke an event.
            </summary>
            <param name="eventInstance">The event instance.</param>
            <typeparam name="T">Type of Event.</typeparam>
            <returns>If there was an event handler invoked for this event, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MiraAPI.Events.MiraEventManager.InvokeEvent(MiraAPI.Events.MiraEvent,System.Type)">
            <summary>
            Invoke an event and use a specific type to find the handlers.
            </summary>
            <param name="eventInstance">The event instance.</param>
            <param name="type">The type to use for handler lookup.</param>
            <returns>If there was an event handler invoked for this event, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MiraAPI.Events.MiraEventManager.RegisterEventHandler(System.Type,System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Register an event.
            </summary>
            <param name="type">The type of event.</param>
            <param name="methodInfo">The MethodInfo of the event handler.</param>
            <param name="priority">The priority of the event handler. Lower values are called first.</param>
        </member>
        <member name="M:MiraAPI.Events.MiraEventManager.RegisterEventHandler``1(System.Action{``0},System.Int32)">
            <summary>
            Register an event.
            </summary>
            <param name="handler">The callback method/handler for the event.</param>
            <param name="priority">The priority of the event handler. Lower values are called first.</param>
            <typeparam name="T">Type of event.</typeparam>
        </member>
        <member name="T:MiraAPI.Events.MiraEventWrapper">
            <summary>
            Wrapper for event handlers.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.MiraEventWrapper.EventHandler">
            <summary>
            Gets the event handler delegate.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.MiraEventWrapper.Priority">
            <summary>
            Gets the priority of the handler. Lower values are called first.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.MiraEventWrapper.#ctor(System.Delegate,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.MiraEventWrapper"/> class.
            </summary>
            <param name="eventHandler">The action for the event handler.</param>
            <param name="priority">The priority of the handler.</param>
        </member>
        <member name="T:MiraAPI.Events.Mira.MiraButtonCancelledEvent`1">
            <summary>
            Invoked when a Mira Button click is cancelled. Do not use for vanilla buttons.
            </summary>
            <typeparam name="T">The Mira Button type.</typeparam>
        </member>
        <member name="P:MiraAPI.Events.Mira.MiraButtonCancelledEvent`1.Button">
            <summary>
            Gets Mira Button whose click was cancelled.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Mira.MiraButtonCancelledEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Mira.MiraButtonCancelledEvent`1"/> class.
            </summary>
            <param name="button">The Mira Button whose click was cancelled.</param>
        </member>
        <member name="T:MiraAPI.Events.Mira.MiraButtonCancelledEvent">
            <summary>
            Invoked when a Mira Button click is cancelled. Do not use for vanilla buttons.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Mira.MiraButtonCancelledEvent.Button">
            <summary>
            Gets Mira Button whose click was cancelled.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Mira.MiraButtonCancelledEvent.#ctor(MiraAPI.Hud.CustomActionButton)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Mira.MiraButtonCancelledEvent"/> class.
            </summary>
            <param name="button">The Mira Button whose click was cancelled.</param>
        </member>
        <member name="T:MiraAPI.Events.Mira.MiraButtonClickEvent`1">
            <summary>
            Button click event for Mira Buttons only. Do not use for vanilla buttons.
            </summary>
            <typeparam name="T">The Mira Button type.</typeparam>
        </member>
        <member name="P:MiraAPI.Events.Mira.MiraButtonClickEvent`1.Button">
            <summary>
            Gets Mira Button that was clicked.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Mira.MiraButtonClickEvent`1.GenericClickEvent">
            <summary>
            Gets the generic click event that is invoked before this button-specific event.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Mira.MiraButtonClickEvent`1.#ctor(`0,MiraAPI.Events.Mira.MiraButtonClickEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Mira.MiraButtonClickEvent`1"/> class.
            </summary>
            <param name="button">The Mira Button that was clicked.</param>
            <param name="genericClickEvent">The generic click event invoked before button-specific events.</param>
        </member>
        <member name="T:MiraAPI.Events.Mira.MiraButtonClickEvent">
            <summary>
            Button click event for Mira Buttons only. Do not use for vanilla buttons.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Mira.MiraButtonClickEvent.Button">
            <summary>
            Gets Mira Button that was clicked.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Mira.MiraButtonClickEvent.#ctor(MiraAPI.Hud.CustomActionButton)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Mira.MiraButtonClickEvent"/> class.
            </summary>
            <param name="button">The Mira Button that was clicked.</param>
        </member>
        <member name="T:MiraAPI.Events.RegisterEventAttribute">
            <summary>
            Register an event.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.RegisterEventAttribute.Priority">
            <summary>
            Gets the priority of the event. Lower values are called first.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.RegisterEventAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.RegisterEventAttribute"/> class.
            </summary>
            <param name="priority">The priority of the event. Lower values are called first.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent">
            <summary>
            Event that is invoked after a player is murdered. Only called after a successful murder. This event is not cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent.Source">
            <summary>
            Gets the player that killed the target.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent.Target">
            <summary>
            Gets the player that was killed.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent.#ctor(PlayerControl,PlayerControl)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent"/> class.
            </summary>
            <param name="source">The killer.</param>
            <param name="target">The killed player.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.BeforeMurderEvent">
            <summary>
            Event that is invoked before a player is murdered. This event is cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.BeforeMurderEvent.Source">
            <summary>
            Gets the player that is killing the target.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.BeforeMurderEvent.Target">
            <summary>
            Gets the player that is being killed.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.BeforeMurderEvent.#ctor(PlayerControl,PlayerControl)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.BeforeMurderEvent"/> class.
            </summary>
            <param name="source">The player that is killing the target.</param>
            <param name="target">The player that is being killed.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.GameEndEvent">
            <summary>
            The event that is invoked when the end game screen is shown. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.GameEndEvent.EndGameManager">
            <summary>
            Gets the instance of the EndGameManager.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.GameEndEvent.#ctor(EndGameManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.GameEndEvent"/> class.
            </summary>
            <param name="manager">The instance of the EndGameManager.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.IntroBeginEvent">
            <summary>
            The event that is invoked when the intro cutscene is shown. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.IntroBeginEvent.IntroCutscene">
            <summary>
            Gets the instance of the IntroCutscene.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.IntroBeginEvent.#ctor(IntroCutscene)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.IntroBeginEvent"/> class.
            </summary>
            <param name="introCutscene">The intro cutscene.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.IntroEndEvent">
            <summary>
            The event that is invoked when the intro cutscene has finished playing.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.IntroEndEvent.#ctor(IntroCutscene)">
            <summary>
            The event that is invoked when the intro cutscene has finished playing.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.IntroEndEvent.IntroCutscene">
            <summary>
            Gets the instance of the IntroCutscene.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.RoundStartEvent">
            <summary>
            Start Round event, invoked on IntroCutscene.OnDestroy and ExileController.WrapUp.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.RoundStartEvent.TriggeredByIntro">
            <summary>
            Gets a value indicating whether the event was triggered by the IntroCutscene or ExileController.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.RoundStartEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.RoundStartEvent"/> class.
            </summary>
            <param name="triggeredByIntro">Whether the event was triggered by the intro or not.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Gameplay.SetRoleEvent">
            <summary>
            Event that is invoked after a player's role is set. This event is not cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.SetRoleEvent.Player">
            <summary>
            Gets the player whos role was changed.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Gameplay.SetRoleEvent.Role">
            <summary>
            Gets the role that the player was set to.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Gameplay.SetRoleEvent.#ctor(PlayerControl,AmongUs.GameOptions.RoleTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.SetRoleEvent"/> class.
            </summary>
            <param name="player">The player.</param>
            <param name="role">The new role.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Map.CloseDoorsEvent">
            <summary>
            Event fired when a player closes the doors in a room.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Map.CloseDoorsEvent.Room">
            <summary>
            Gets the room that the doors were closed in.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Map.CloseDoorsEvent.#ctor(SystemTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Map.CloseDoorsEvent"/> class.
            </summary>
            <param name="room">The room that was closed.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Map.PlayerOpenSabotageEvent">
            <summary>
            Sabotage from Vanilla Among Us.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Map.PlayerOpenSabotageEvent.MapBehaviour">
            <summary>
            Gets the MapBehaviour.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Map.PlayerOpenSabotageEvent.#ctor(MapBehaviour)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Map.PlayerOpenSabotageEvent"/> class.
            </summary>
            <param name="mapBehaviour">The MapBehaviour.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent">
            <summary>
            Cancelable event that is invoked before a system is updated. Usually used for sabotage events.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent.SystemType">
            <summary>
            Gets the type of system that will be updated.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent.Player">
            <summary>
            Gets the player that is updating the system.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent.Amount">
            <summary>
            Gets the byte amount the system is being updated by.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent.#ctor(SystemTypes,PlayerControl,System.Byte)">
            <summary>
             Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Map.UpdateSystemEvent"/> class.
            </summary>
            <param name="systemType">The SystemType being updated.</param>
            <param name="amount">Amount to update System to.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.EjectionEvent">
            <summary>
            The event that is invoked when a player is ejected. Non-cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.EjectionEvent.ExileController">
            <summary>
            Gets the instance of the ExileController.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.EjectionEvent.#ctor(ExileController)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.EjectionEvent"/> class.
            </summary>
            <param name="controller">The exile controller.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.EndMeetingEvent">
            <summary>
            The event that is invoked when the meeting has ended.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.EndMeetingEvent.#ctor(MeetingHud)">
            <summary>
            The event that is invoked when the meeting has ended.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.EndMeetingEvent.MeetingHud">
            <summary>
            Gets the MeetingHud instance.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent">
            <summary>
            The event that is invoked when a body is reported.
            This is invoked in CmdReportBody.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent.Reporter">
            <summary>
            Gets the player that is reporting the body.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent.Target">
            <summary>
            Gets the player that is being reported. Will be null for emergency meeting.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent.Body">
            <summary>
            Gets the body that is being reported. Will be null for emergency meeting.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent.#ctor(PlayerControl,NetworkedPlayerInfo,DeadBody)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.ReportBodyEvent"/> class.
            </summary>
            <param name="reporter">The player who reported the body.</param>
            <param name="target">The player being reported.</param>
            <param name="body">The body being reported.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.StartMeetingEvent">
            <summary>
            The event that is invoked when a meeting is called. This event is not cancelable.
            This event is called after Mira resets votes, so if you plan on adding votes to a specific player, do it with this event.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.StartMeetingEvent.MeetingHud">
            <summary>
            Gets the MeetingHud instance.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.StartMeetingEvent.#ctor(MeetingHud)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.StartMeetingEvent"/> class.
            </summary>
            <param name="meetingHud">The MeetingHud instance.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.CheckForEndVotingEvent">
            <summary>
            Checks if voting is complete. If canceled, the default end voting logic will be skipped.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.CheckForEndVotingEvent.IsVotingComplete">
            <summary>
            Gets a value indicating whether default voting logic determines that voting is complete.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.CheckForEndVotingEvent.ForceEndVoting">
            <summary>
            Gets or sets a value indicating whether the voting should be forced to end, regardless of the default logic.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.CheckForEndVotingEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.CheckForEndVotingEvent"/> class.
            </summary>
            <param name="isVotingComplete">>True if voting is complete, false otherwise.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent">
            <summary>
            The event that is invoked when Mira handles a vote. This is invoked before Mira's behaviour, so be cautious.
            If you intend on adding custom vote behaviour, cancel the event and do so.
            If you are NOT canceling the event, keep in mind that Mira automatically removes a vote and adds the suspect to the VotedPlayers list after this event is invoked.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent.VoteData">
            <summary>
            Gets the instance of the voter's vote data.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent.Player">
            <summary>
            Gets the player who voted.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent.TargetId">
            <summary>
            Gets the player id of the target.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent.TargetPlayerInfo">
            <summary>
            Gets the player info of the target.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent.#ctor(MiraAPI.Voting.PlayerVoteData,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.HandleVoteEvent"/> class.
            </summary>
            <param name="playerVoteData">The voter's data.</param>
            <param name="targetId">The target's playerId.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent">
            <summary>
            The event that is invoked when the player tries to select another player to vote.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent.VoteData">
            <summary>
            Gets the instance of the voter's vote data.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent.TargetId">
            <summary>
            Gets the player id of the target.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent.TargetPlayerInfo">
            <summary>
            Gets the player info of the target.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent.AllowSelect">
            <summary>
            Gets or sets a value indicating whether the player is allowed to select the target.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent.#ctor(MiraAPI.Voting.PlayerVoteData,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.MeetingSelectEvent"/> class.
            </summary>
            <param name="playerVoteData">The voter's data.</param>
            <param name="targetId">The target's playerId.</param>
            <param name="allowSelect">>Whether the player is allowed to select the target.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.PopulateResultsEvent">
            <summary>
            Called in VotingUtils.HandlePopulateResults.
            Cancelling is NOT advised but if you do plan on cancelling, please ensure you account for displaying ALL player's votes.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.PopulateResultsEvent.Votes">
            <summary>
            Gets a list of networked votes.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.PopulateResultsEvent.#ctor(System.Collections.Generic.List{MiraAPI.Voting.CustomVote})">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.PopulateResultsEvent"/> class.
            </summary>
            <param name="votes">The list of votes.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent">
            <summary>
            Ran after calculating votes and before displaying the results. Only ran on the host.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent"/> class.
            </remarks>
            <param name="votes">>The list of votes that are being processed.</param>
            <param name="exiledPlayer">The player to be exiled. Will be null if no player is to be exiled.</param>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent.#ctor(System.Collections.Generic.List{MiraAPI.Voting.CustomVote},NetworkedPlayerInfo)">
            <summary>
            Ran after calculating votes and before displaying the results. Only ran on the host.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent"/> class.
            </remarks>
            <param name="votes">>The list of votes that are being processed.</param>
            <param name="exiledPlayer">The player to be exiled. Will be null if no player is to be exiled.</param>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent.ExiledPlayerModified">
            <summary>
            Gets a value indicating whether the exiled player has been modified by the event.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent.VotesModified">
            <summary>
            Gets a value indicating whether the votes have been modified by the event.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent.Votes">
            <summary>
            Gets the list of votes that are being processed.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.ProcessVotesEvent.ExiledPlayer">
            <summary>
            Gets or sets the player to be exiled. Will be null if no player is to be exiled.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Meeting.Voting.VotingCompleteEvent">
            <summary>
            The event that is invoked when the voting phase of a meeting is complete.
            </summary>
            <param name="meetingHud">The MeetingHud instance.</param>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Meeting.Voting.VotingCompleteEvent.#ctor(MeetingHud)">
            <summary>
            The event that is invoked when the voting phase of a meeting is complete.
            </summary>
            <param name="meetingHud">The MeetingHud instance.</param>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Meeting.Voting.VotingCompleteEvent.MeetingHud">
            <summary>
            Gets the MeetingHud instance.
            </summary>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Player.CompleteTaskEvent">
            <summary>
            The event that is invoked when a player completes a task. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.CompleteTaskEvent.Player">
            <summary>
            Gets the instance of the <see cref="T:PlayerControl"/>.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.CompleteTaskEvent.Task">
            <summary>
            Gets the instance of the <see cref="T:PlayerTask"/> that the player completed.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Player.CompleteTaskEvent.#ctor(PlayerControl,PlayerTask)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Player.CompleteTaskEvent"/> class.
            </summary>
            <param name="player">The player who completed the task.</param>
            <param name="task">The task that the player completed.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Player.PlayerDeathEvent">
            <summary>
            Event that is invoked when a player dies. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.PlayerDeathEvent.Player">
            <summary>
            Gets the player who died.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.PlayerDeathEvent.DeathReason">
            <summary>
            Gets the reason the player died.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Player.PlayerDeathEvent.#ctor(PlayerControl,DeathReason)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Player.PlayerDeathEvent"/> class.
            </summary>
            <param name="player">The player who died.</param>
            <param name="reason">The reason the player died.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Player.PlayerJoinEvent">
            <summary>
            Event that is invoked when a player joins the lobby. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.PlayerJoinEvent.ClientData">
            <summary>
            Gets the player who joined.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Player.PlayerJoinEvent.#ctor(InnerNet.ClientData)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Player.PlayerJoinEvent"/> class.
            </summary>
            <param name="data">The data of the player who joined.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Player.PlayerLeaveEvent">
            <summary>
            Event that is invoked when a player leaves the game. Non cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.PlayerLeaveEvent.ClientData">
            <summary>
            Gets the player who left.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Player.PlayerLeaveEvent.Reason">
            <summary>
            Gets the reason why the player left.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Player.PlayerLeaveEvent.#ctor(InnerNet.ClientData,DisconnectReasons)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Player.PlayerLeaveEvent"/> class.
            </summary>
            <param name="data">The data of the player who left.</param>
            <param name="reason">The reason why the player left.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Usables.EnterVentEvent">
            <summary>
            Event that is invoked when a player enters a vent. This event is cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.EnterVentEvent.Player">
            <summary>
            Gets the player that is entering the vent.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.EnterVentEvent.Vent">
            <summary>
            Gets the vent that the player is entering.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Usables.EnterVentEvent.#ctor(PlayerControl,Vent)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Usables.EnterVentEvent"/> class.
            </summary>
            <param name="player">The player that is entering the vent.</param>
            <param name="vent">The vent being entered.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Usables.ExitVentEvent">
            <summary>
            Event that is invoked when a player exits a vent. This event is cancelable.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.ExitVentEvent.Player">
            <summary>
            Gets the player that is exiting the vent.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.ExitVentEvent.Vent">
            <summary>
            Gets the vent that the player is exiting.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Usables.ExitVentEvent.#ctor(PlayerControl,Vent)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Usables.ExitVentEvent"/> class.
            </summary>
            <param name="player">The player who is exiting the vent.</param>
            <param name="vent">The vent being exited from.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Usables.PlayerCanUseEvent">
            <summary>
            Event for if a <see cref="T:PlayerControl"/> can use an <see cref="T:IUsable"/> from Vanilla Among Us. Will always be ran locally.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Usables.PlayerCanUseEvent.#ctor(IUsable)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Usables.PlayerCanUseEvent"/> class.
            </summary>
            <param name="usable">The IUsable.</param>
        </member>
        <member name="T:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent">
            <summary>
            Event for <see cref="T:PlayerControl"/> using a <see cref="T:IUsable"/> from Vanilla Among Us. Will always be ran locally.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent.Usable">
            <summary>
            Gets the instance of <see cref="T:IUsable"/> that was used.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent.IsPrimaryConsole">
            <summary>
            Gets a value indicating whether the IUsable is a <see cref="T:Console"/>, <see cref="T:MapConsole"/>, or <see cref="T:SystemConsole"/>.
            </summary>
        </member>
        <member name="P:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent.IsVent">
            <summary>
            Gets a value indicating whether the IUsable is a <see cref="T:Vent"/>.
            </summary>
        </member>
        <member name="M:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent.#ctor(IUsable)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Events.Vanilla.Usables.PlayerUseEvent"/> class.
            </summary>
            <param name="usable">The IUsable.</param>
        </member>
        <member name="T:MiraAPI.GameEnd.CustomGameOver">
            <summary>
            Custom Game Over.
            </summary>
        </member>
        <member name="P:MiraAPI.GameEnd.CustomGameOver.Instance">
            <summary>
            Gets the current CustomGameOver.
            </summary>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.VerifyCondition(PlayerControl,NetworkedPlayerInfo[])">
            <summary>
            Verifies if the condition for this CustomGameOver is met.
            </summary>
            <param name="playerControl">The PlayerControl that requested the Game Over.</param>
            <param name="winners">The collection of winners.</param>
            <returns>True if the condition is met, otherwise false.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.BeforeEndGameSetup(EndGameManager)">
            <summary>
            Runs before the base game calls EndGameManager.SetEverythingUp.
            </summary>
            <param name="endGameManager">The EndGameManager instance.</param>
            <returns>Return True to use the run the original method, return False to skip it.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.AfterEndGameSetup(EndGameManager)">
            <summary>
            Runs after the base game calls EndGameManager.SetEverythingUp.
            </summary>
            <param name="endGameManager">The EndGameManager instance.</param>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.GameOverReason``1">
            <summary>
            Get the GameOverReason associated with this CustomGameOver.
            </summary>
            <typeparam name="T">Type of the custom game over.</typeparam>
            <returns>The GameOverReason associated with the custom game over.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.Trigger``1(System.Collections.Generic.IEnumerable{NetworkedPlayerInfo})">
            <summary>
            Send a custom game over.
            </summary>
            <param name="winners">A collection of winners.</param>
            <typeparam name="T">Type of the custom game over.</typeparam>
        </member>
        <member name="M:MiraAPI.GameEnd.CustomGameOver.op_Implicit(MiraAPI.GameEnd.CustomGameOver)~GameOverReason">
            <summary>
            Implicitly convert a CustomGameOver to a GameOverReason.
            </summary>
            <param name="gameOver">The CustomGameOver instance.</param>
            <returns>The GameOverReason associated with the CustomGameOver.</returns>
        </member>
        <member name="T:MiraAPI.GameEnd.GameOverData">
            <summary>
            Data for a game over.
            </summary>
            <param name="Reason">Reason for the game over.</param>
            <param name="Winners">A collection of winners.</param>
        </member>
        <member name="M:MiraAPI.GameEnd.GameOverData.#ctor(System.Int32,System.Collections.Generic.List{NetworkedPlayerInfo})">
            <summary>
            Data for a game over.
            </summary>
            <param name="Reason">Reason for the game over.</param>
            <param name="Winners">A collection of winners.</param>
        </member>
        <member name="P:MiraAPI.GameEnd.GameOverData.Reason">
            <summary>Reason for the game over.</summary>
        </member>
        <member name="P:MiraAPI.GameEnd.GameOverData.Winners">
            <summary>A collection of winners.</summary>
        </member>
        <member name="T:MiraAPI.GameEnd.GameOverManager">
            <summary>
            Manage custom game overs.
            </summary>
        </member>
        <member name="M:MiraAPI.GameEnd.GameOverManager.RegisterGameOver(System.Type)">
            <summary>
            Register a custom game over.
            </summary>
            <param name="gameOverType">Type of the custom game over.</param>
            <exception cref="T:System.ArgumentException">Thrown when the type is not a subclass of CustomGameOver, is abstract, or does not have a parameterless constructor.</exception>
            <returns>>True if the game over was registered successfully, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.GameOverManager.TryGetGameOver(System.Int32,MiraAPI.GameEnd.CustomGameOver@)">
            <summary>
            Create an instance of a custom game over.
            </summary>
            <param name="id">ID of the custom game over.</param>
            <param name="customGameOver">The created instance of the custom game over.</param>
            <returns>An instance of the custom game over.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.GameOverManager.GetGameOverId``1">
            <summary>
            Get the ID of a custom game over.
            </summary>
            <typeparam name="T">Type of the custom game over.</typeparam>
            <returns>The ID of the custom game over.</returns>
        </member>
        <member name="M:MiraAPI.GameEnd.GameOverManager.GetGameOverId(System.Type)">
            <summary>
            Get the ID of a custom game over.
            </summary>
            <param name="gameOverType">Type of the custom game over.</param>
            <returns>The ID of the custom game over.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the type is not registered.</exception>
        </member>
        <member name="T:MiraAPI.GameModes.CustomGameMode">
            <summary>
            Base class for custom gamemodes.
            </summary>
        </member>
        <member name="P:MiraAPI.GameModes.CustomGameMode.Name">
            <summary>
            Gets the game mode name.
            </summary>
        </member>
        <member name="P:MiraAPI.GameModes.CustomGameMode.Description">
            <summary>
            Gets the game mode description.
            </summary>
        </member>
        <member name="P:MiraAPI.GameModes.CustomGameMode.Id">
            <summary>
            Gets the game mode ID.
            </summary>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.Initialize">
            <summary>
            Called when Intro Cutscene is destroyed.
            </summary>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.HudStart(HudManager)">
            <summary>
            Called on HudManager.Start().
            </summary>
            <param name="instance">Instance of HudManager.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.HudUpdate(HudManager)">
            <summary>
            Called every frame on HudManager.Update().
            </summary>
            <param name="instance">Instance of HudManager.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.OnDeath(PlayerControl)">
            <summary>
            Called when a player is killed.
            </summary>
            <param name="player">PlayerControl that was killed.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CheckGameEnd(System.Boolean@,LogicGameFlowNormal)">
            <summary>
            Calculate Game End logic.
            </summary>
            <param name="runOriginal">Should original game end logic be used.</param>
            <param name="instance">Instance of LogicGameFlowNormal.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.AssignRoles(System.Boolean@,LogicRoleSelectionNormal)">
            <summary>
            Custom role assignment.
            </summary>
            <param name="runOriginal">Should original role assignment be used.</param>
            <param name="instance">Instance of LogicRoleSelection.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanKill(System.Boolean@,System.Boolean@,PlayerControl)">
            <summary>
            Custom murder logic.
            </summary>
            <param name="runOriginal">Should the original murder logic be used.</param>
            <param name="result">Result of custom murder logic.</param>
            <param name="target">Target player for murder.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.AreRoleSettingsEnabled">
            <summary>
            Should Roles Settings be available when this gamemode is selected.
            </summary>
            <returns>True if Role Settings are enabled in this game mode.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.AreGameSettingsEnabled">
            <summary>
            Should Game Settings be available when this gamemode is selected.
            </summary>
            <returns>True if Game Settings are enabled in this mode.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CalculateWinners">
            <summary>
            Custom winner selection.
            </summary>
            <returns>List of winners or null.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.ShowGameModeIntroCutscene">
            <summary>
            Show gamemode in Intro Cutscene.
            </summary>
            <returns>True if the game mode should be shown in the intro cutscene.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanUseMapConsole(MapConsole)">
            <summary>
            Can Admin be used in this gamemode.
            </summary>
            <param name="console">Admin Console.</param>
            <returns>True if Admin console is enabled.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanReport(DeadBody)">
            <summary>
            Can a body be reported in this gamemode.
            </summary>
            <param name="body">Target body for reporting.</param>
            <returns>True if dead bodies can be reported.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanUseSystemConsole(SystemConsole)">
            <summary>
            Can system consoles be used in this gamemode.
            </summary>
            <param name="console">System Console.</param>
            <returns>True if system consoles are enabled in this mode.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanUseTasks(Console)">
            <summary>
            Can tasks be interacted with in this gamemode.
            </summary>
            <param name="console">Task console.</param>
            <returns>True if tasks are enabled in this mode.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.ShouldShowSabotageMap(MapBehaviour)">
            <summary>
            Should the sabotage map be used when attempting to open sabotage overlay.
            </summary>
            <param name="map">MapBehaviour object.</param>
            <returns>True if the sabotage map should be shown.</returns>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameMode.CanVent(Vent,NetworkedPlayerInfo)">
            <summary>
            Can a player vent in this gamemode.
            </summary>
            <param name="vent">Target vent.</param>
            <param name="playerInfo">Player attempting to vent.</param>
            <returns>True if venting is enabled in this mode.</returns>
        </member>
        <member name="T:MiraAPI.GameModes.CustomGameModeManager">
            <summary>
            Manages custom gamemodes.
            </summary>
        </member>
        <member name="F:MiraAPI.GameModes.CustomGameModeManager.GameModes">
            <summary>
            List of registered gamemodes.
            </summary>
        </member>
        <member name="P:MiraAPI.GameModes.CustomGameModeManager.ActiveMode">
            <summary>
            Current gamemode.
            </summary>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameModeManager.SetGameMode(System.Int32)">
            <summary>
            Set current gamemode.
            </summary>
            <param name="id">gamemode ID.</param>
        </member>
        <member name="M:MiraAPI.GameModes.CustomGameModeManager.RegisterGameMode(System.Type)">
            <summary>
            Register gamemode from type.
            </summary>
            <param name="gameModeType">Type of gamemode class, should inherit from <see cref="T:MiraAPI.GameModes.CustomGameMode"/>.</param>
        </member>
        <member name="T:MiraAPI.GameOptions.AbstractOptionGroup">
            <summary>
            Base class for option groups. An option group is a collection of options that are displayed together in the options menu.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.GroupName">
            <summary>
            Gets the name of the group. Visible in options menu.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.OptionableType">
            <summary>
            Gets the Optionable type of the group.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.ShowInModifiersMenu">
            <summary>
            Gets a value indicating whether the group should be shown in the modifiers menu.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.GroupVisible">
            <summary>
            Gets the function that determines whether the group should be visible or not.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.GroupColor">
            <summary>
            Gets the group color. This is used to color the group in the options menu.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup.GroupPriority">
            <summary>
            Gets the group priority. This is used to determine the order in which groups are displayed in the options menu.
            Zero is the highest priority, and the default value is the max uint value.
            </summary>
        </member>
        <member name="T:MiraAPI.GameOptions.AbstractOptionGroup`1">
            <summary>
            Base class for option groups. An option group is a collection of options that are displayed together in the options menu.
            </summary>
            <typeparam name="T">The type of the optionable that this group contains.</typeparam>
        </member>
        <member name="P:MiraAPI.GameOptions.AbstractOptionGroup`1.OptionableType">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.Attributes.ModdedEnumOptionAttribute">
            <summary>
            Attribute for creating an enum option.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedEnumOptionAttribute.#ctor(System.String,System.Type,System.String[])">
            <summary>
            Attribute for creating an enum option.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedEnumOptionAttribute.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedEnumOptionAttribute.GetValue">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.Attributes.ModdedNumberOptionAttribute">
            <summary>
            A number option attribute for the modded options system.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedNumberOptionAttribute.#ctor(System.String,System.Single,System.Single,System.Single,MiraAPI.Utilities.MiraNumberSuffixes,System.String,System.Boolean)">
            <summary>
            A number option attribute for the modded options system.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedNumberOptionAttribute.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedNumberOptionAttribute.GetValue">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute">
            <summary>
            Represents an attribute that is used to define a modded option.
            </summary>
            <param name="title">The option title.</param>
            <param name="roleType">Optional parameter to specify a role Type.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Represents an attribute that is used to define a modded option.
            </summary>
            <param name="title">The option title.</param>
            <param name="roleType">Optional parameter to specify a role Type.</param>
        </member>
        <member name="P:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute.Title">
            <summary>
            Gets the title of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute.RoleType">
            <summary>
            Gets the role type of the option.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute.SetValue(System.Object)">
            <summary>
            Sets the value of the option.
            </summary>
            <param name="value">The new value as an object.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedOptionAttribute.GetValue">
            <summary>
            Gets the value of the option.
            </summary>
            <returns>The value of the option as an object.</returns>
        </member>
        <member name="T:MiraAPI.GameOptions.Attributes.ModdedToggleOptionAttribute">
            <summary>
            Attribute for a toggle option.
            </summary>
            <param name="title">The option title.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedToggleOptionAttribute.#ctor(System.String)">
            <summary>
            Attribute for a toggle option.
            </summary>
            <param name="title">The option title.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedToggleOptionAttribute.SetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.Attributes.ModdedToggleOptionAttribute.GetValue">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.IOptionable">
            <summary>
            Interface for classes that can be used for option groups.
            </summary>
        </member>
        <member name="T:MiraAPI.GameOptions.ModdedOptionsManager">
            <summary>
            Handles modded options.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.ModdedOptionsManager.PropertySetterPatch(System.Reflection.MethodBase,System.Object)">
            <summary>
            Patches the setter of a property to update the value of the option.
            </summary>
            <param name="__originalMethod">The original setter method.</param>
            <param name="value">The new object value.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.ModdedOptionsManager.PropertyGetterPatch(System.Reflection.MethodBase,System.Object@)">
            <summary>
            Patches the getter of a property to return the value of the option.
            </summary>
            <param name="__originalMethod">The original getter method.</param>
            <param name="__result">The result of the property getter.</param>
            <returns>False so the original getter gets skipped.</returns>
        </member>
        <member name="T:MiraAPI.GameOptions.OptionGroupSingleton`1">
            <summary>
            Singleton for option groups.
            </summary>
            <typeparam name="T">The option group type.</typeparam>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionGroupSingleton`1.Instance">
            <summary>
            Gets the instance of the option group.
            </summary>
        </member>
        <member name="T:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption">
            <summary>
            An option for selecting an enum value.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.Values">
            <summary>
            Gets the string values of the enum.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.#ctor(System.String,System.Int32,System.Type,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption"/> class.
            </summary>
            <param name="title">The title of the option.</param>
            <param name="defaultValue">The default value as an int.</param>
            <param name="enumType">The Enum type.</param>
            <param name="values">An option list of string values to use in place of the enum name.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.CreateOption(ToggleOption,NumberOption,StringOption,UnityEngine.Transform)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.GetFloatData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.GetNetData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.HandleNetData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.GetValueFromOptionBehaviour(OptionBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption.OnValueChanged(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1">
            <summary>
            An option for selecting an enum value.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.Values">
            <summary>
            Gets the string values of the enum.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.#ctor(System.String,`0,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1"/> class.
            </summary>
            <param name="title">The title of the option.</param>
            <param name="defaultValue">The default value as an int.</param>
            <param name="values">An option list of string values to use in place of the enum name.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.CreateOption(ToggleOption,NumberOption,StringOption,UnityEngine.Transform)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.GetFloatData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.GetNetData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.HandleNetData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.GetValueFromOptionBehaviour(OptionBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedEnumOption`1.OnValueChanged(`0)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption">
            <summary>
            Represents a modded number option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.Min">
            <summary>
            Gets the minimum value of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.Max">
            <summary>
            Gets the maximum value of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.Increment">
            <summary>
            Gets the increment value of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.SuffixType">
            <summary>
            Gets the suffix type of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.ZeroInfinity">
            <summary>
            Gets a value indicating whether zero is infinity.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,MiraAPI.Utilities.MiraNumberSuffixes,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption"/> class.
            </summary>
            <param name="title">The title of the option.</param>
            <param name="defaultValue">The default value as a float.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="increment">The increment.</param>
            <param name="suffixType">The suffix type.</param>
            <param name="formatString">Optional format string for the option screen.</param>
            <param name="zeroInfinity">Whether zero is infinity or not.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.CreateOption(ToggleOption,NumberOption,StringOption,UnityEngine.Transform)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.GetFloatData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.GetNetData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.HandleNetData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.GetValueFromOptionBehaviour(OptionBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.OnValueChanged(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedNumberOption.op_Implicit(MiraAPI.GameOptions.OptionTypes.ModdedNumberOption)~System.Int32">
            <summary>
            Implicitly converts the option to an int.
            </summary>
            <param name="option">The option.</param>
            <returns>Integer value.</returns>
        </member>
        <member name="T:MiraAPI.GameOptions.OptionTypes.ModdedOption`1">
            <summary>
            Represents a modded option.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.Id">
            <summary>
            Gets the unique identifier of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.Title">
            <summary>
            Gets the title of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.StringName">
            <summary>
            Gets the StringName object of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.Data">
            <summary>
            Gets the BaseGameSetting data of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.ParentMod">
            <summary>
            Gets or sets the parent mod of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.Value">
            <summary>
            Gets or sets the value of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.DefaultValue">
            <summary>
            Gets the default value of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.ChangedEvent">
            <summary>
            Gets or sets the event that is invoked when the value of the option changes.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.Visible">
            <summary>
            Gets or sets the visibility of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.OptionBehaviour">
            <summary>
            Gets or sets the option behaviour of the option.
            </summary>
        </member>
        <member name="P:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.ConfigDefinition">
            <summary>
            Gets or sets the config definition of the option.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.GameOptions.OptionTypes.ModdedOption`1"/> class.
            </summary>
            <param name="title">The option title.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.SetValue(`0)">
            <summary>
            Sets the value of the option.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.GetFloatData">
            <summary>
            Gets the float data of the option.
            </summary>
            <returns>A float object representing the option's value.</returns>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.GetNetData">
            <summary>
            Gets the net data of the option.
            </summary>
            <returns>A NetData object representing this option's data.</returns>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.HandleNetData(System.Byte[])">
            <summary>
            Handles incoming net data.
            </summary>
            <param name="data">The NetData's byte array.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.OnValueChanged(`0)">
            <summary>
            Handles the value changed event.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.GetValueFromOptionBehaviour(OptionBehaviour)">
            <summary>
            Gets the value from the option behaviour.
            </summary>
            <param name="optionBehaviour">The OptionBehaviour.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.CreateOption(ToggleOption,NumberOption,StringOption,UnityEngine.Transform)">
            <summary>
            Creates the option behaviour.
            </summary>
            <param name="toggleOpt">The ToggleOption prefab.</param>
            <param name="numberOpt">The NumberOption prefab.</param>
            <param name="stringOpt">The StringOption prefab.</param>
            <param name="container">The options container.</param>
            <returns>A new OptionBehaviour for this modded option.</returns>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedOption`1.op_Implicit(MiraAPI.GameOptions.OptionTypes.ModdedOption{`0})~`0">
            <summary>
            Implicitly converts the option to type of <typeparamref name="T"/>.
            </summary>
            <param name="option">The option.</param>
            <returns>Value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption">
            <summary>
            A modded toggle option.
            </summary>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption"/> class.
            </summary>
            <param name="title">The option title.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.CreateOption(ToggleOption,NumberOption,StringOption,UnityEngine.Transform)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.GetFloatData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.GetNetData">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.HandleNetData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.GetValueFromOptionBehaviour(OptionBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.GameOptions.OptionTypes.ModdedToggleOption.OnValueChanged(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Hud.ButtonLocation">
            <summary>
            The location of the custom button on the screen.
            </summary>
        </member>
        <member name="F:MiraAPI.Hud.ButtonLocation.BottomLeft">
            <summary>
            Placed in the bottom left.
            </summary>
        </member>
        <member name="F:MiraAPI.Hud.ButtonLocation.BottomRight">
            <summary>
            Placed in the bottom right.
            </summary>
        </member>
        <member name="T:MiraAPI.Hud.CustomActionButton">
            <summary>
            Class for making custom action buttons. More customizable than the default Action/Ability buttons in the base game.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Name">
            <summary>
            Gets the name and text of the button.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.InitialCooldown">
            <summary>
            Gets the initial cooldown duration in seconds.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Cooldown">
            <summary>
            Gets the button's cooldown duration in seconds.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Sprite">
            <summary>
            Gets the sprite of the button. Use <see cref="T:MiraAPI.Utilities.Assets.LoadableResourceAsset"/> to load a sprite from a resource path. Use <see cref="T:MiraAPI.Utilities.Assets.LoadableBundleAsset`1"/> to load a sprite from an asset bundle.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.EffectDuration">
            <summary>
            Gets the button's effect duration in seconds. If the button has no effect, set to 0.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.MaxUses">
            <summary>
            Gets the maximum amount of uses the button has. If the button has infinite uses, set to 0.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.TextOutlineColor">
            <summary>
            Gets the button's text outline color.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Location">
            <summary>
            Gets or sets the location of the button on the screen.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.HasEffect">
            <summary>
            Gets a value indicating whether the button has an effect ability.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.LimitedUses">
            <summary>
            Gets a value indicating whether the button has limited uses.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.EffectActive">
            <summary>
            Gets or sets a value indicating whether the effect is currently active, if there is one.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.TimerPaused">
            <summary>
            Gets or sets a value indicating whether the timer is currently active.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.UsesLeft">
            <summary>
            Gets or sets the amount of uses left.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Timer">
            <summary>
            Gets or sets the timer variable to measure cooldowns and effects.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton.Button">
            <summary>
            Gets or sets the button object in game. This is created by Mira API automatically.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.CreateButton(UnityEngine.Transform)">
            <summary>
            The method used to create the button.
            </summary>
            <param name="parent">The parent of the button.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetButtonLocation(MiraAPI.Hud.ButtonLocation,System.Boolean)">
            <summary>
            Allows you to change the button's location.
            </summary>
            <param name="location">The new location.</param>
            <param name="moveButton">Whether the button's position should change in-game.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.ResetCooldownAndOrEffect">
            <summary>
            A utility function to reset the cooldown and/or effect of the button.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetTextOutline(UnityEngine.Color)">
            <summary>
            A utility function to change the outline color of the button's text.
            </summary>
            <param name="color">The new color.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.OverrideSprite(UnityEngine.Sprite)">
            <summary>
            A utility function to override the sprite of the button.
            </summary>
            <param name="sprite">The new sprite to override with.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.OverrideName(System.String)">
            <summary>
            A utility function to override the name of the button.
            </summary>
            <param name="name">The new name to override with.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetTimer(System.Single)">
            <summary>
            Set the button's timer.
            </summary>
            <param name="time">The time you want to set to.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.IncreaseTimer(System.Single)">
            <summary>
            Increase the button's timer.
            </summary>
            <param name="amount">The amount you want to increase by.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.DecreaseTimer(System.Single)">
            <summary>
            Decrease the button's timer.
            </summary>
            <param name="amount">The amount you want to decrease by.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetTimerPaused(System.Boolean)">
            <summary>
            Sets whether the timer is paused or not.
            </summary>
            <param name="val">Whether you want to pause/resume the timer.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetUses(System.Int32)">
            <summary>
            Set the amount of uses this button has left.
            </summary>
            <param name="amount">The amount you want to set to.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.IncreaseUses(System.Int32)">
            <summary>
            Increase the amount of uses this button has left.
            </summary>
            <param name="amount">The amount you want to increase by. Default: 1.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.DecreaseUses(System.Int32)">
            <summary>
            Decrease the amount of uses this button has left.
            </summary>
            <param name="amount">The amount you want to decrease by. Default: 1.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.FixedUpdate(PlayerControl)">
            <summary>
            A utility function that runs with the local PlayerControl's FixedUpdate if the button is enabled.
            </summary>
            <param name="playerControl">the local PlayerControl.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.OnClick">
            <summary>
            Callback method for the button click event.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.Enabled(RoleBehaviour)">
            <summary>
            This method determines if the button should be active or not.
            True means the button is active, false means the button is disabled.
            </summary>
            <param name="role">The role of the local player.</param>
            <returns>True if the button is enabled, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.OnEffectEnd">
            <summary>
            Given that there is an effect, this method runs when the effect ends.
            <br /> <br /> THIS IS A CALLBACK METHOD! Use <see cref="M:MiraAPI.Hud.CustomActionButton.ResetCooldownAndOrEffect" /> if you want to end the effect.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.CanClick">
            <summary>
            When the button is usable, this method is called to determine if the button can be clicked.
            By default, it takes into account the timer, effect, and uses.
            You can override it to change the behavior.
            </summary>
            <returns>A value that represents whether the button can be clicked or not.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.CanUse">
            <summary>
            Whether the button should light up or not. This is also the base for CanClick.
            You can override it to change the behaviour. Do not include timer in here, that is for CanClick.
            </summary>
            <returns>A value that represents whether the button should light up or not.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.SetActive(System.Boolean,RoleBehaviour)">
            <summary>
            This method is called on the HudManager.SetHudActive method. It determines whether the button should be visible or not.
            The default behavior is to show the button if the <paramref name="visible"/> parameter and the <see cref="M:MiraAPI.Hud.CustomActionButton.Enabled(RoleBehaviour)"/> method return true.
            It can be overridden for custom behavior.
            </summary>
            <param name="visible">Passed in from HudManager.SetHudActive, should hud be active.</param>
            <param name="role">Passed in from HudManager.SetHudActive, the current role of the player.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.ClickHandler">
            <summary>
            This method handles the button click event. It is a wrapper for the <see cref="M:MiraAPI.Hud.CustomActionButton.OnClick"/> method.
            This method takes into account cooldowns, effects, and uses, before calling the <see cref="M:MiraAPI.Hud.CustomActionButton.OnClick"/> method.
            It can be overridden for custom behavior.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton.FixedUpdateHandler(PlayerControl)">
            <summary>
            This method is called on the PlayerControl.FixedUpdate method. It is a wrapper for the <see cref="M:MiraAPI.Hud.CustomActionButton.FixedUpdate(PlayerControl)"/> method.
            By default, it handles the cooldown and effect timers, and sets the button to enabled or disabled.
            It can be overridden for custom behavior.
            </summary>
            <param name="playerControl">The local PlayerControl.</param>
        </member>
        <member name="T:MiraAPI.Hud.CustomActionButton`1">
            <summary>
            Custom action button that has a target object.
            </summary>
            <typeparam name="T">The type of the target object.</typeparam>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton`1.Target">
            <summary>
            Gets or sets the target object of the button.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomActionButton`1.Distance">
            <summary>
            Gets the distance the player must be from the target object to use the button.
            </summary>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.IsTargetValid(`0)">
            <summary>
            Determines if the target object is valid.
            </summary>
            <param name="target">The target object being checked.</param>
            <returns>True if the target object is valid, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.GetTarget">
            <summary>
            The method used to get the target object.
            </summary>
            <returns>The target object or null if it isn't found.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.SetOutline(System.Boolean)">
            <summary>
            Sets the outline of the target object.
            </summary>
            <param name="active">Should the outline be active.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.CanUse">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.CanClick">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Hud.CustomActionButton`1.ResetTarget">
            <summary>
            Use this to reset the button's target after used.
            </summary>
        </member>
        <member name="T:MiraAPI.Hud.CustomButtonManager">
            <summary>
            Custom button manager for handling custom buttons.
            </summary>
        </member>
        <member name="P:MiraAPI.Hud.CustomButtonManager.Buttons">
            <summary>
            Gets a list of all registered custom buttons.
            </summary>
        </member>
        <member name="T:MiraAPI.Hud.CustomButtonSingleton`1">
            <summary>
            A utility class to get the instance of a custom action button.
            </summary>
            <typeparam name="T">The type of the button you are trying to access.</typeparam>
        </member>
        <member name="P:MiraAPI.Hud.CustomButtonSingleton`1.Instance">
            <summary>
            Gets the instance of the button.
            </summary>
        </member>
        <member name="T:MiraAPI.Hud.CustomPlayerMenu">
            <summary>
            Custom Player Menu using the ShapeshifterPanel as a base.
            </summary>
            <param name="il2CppPtr">Used by Il2Cpp. Do not use constructor, this is a MonoBehaviour.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomPlayerMenu.#ctor(System.IntPtr)">
            <summary>
            Custom Player Menu using the ShapeshifterPanel as a base.
            </summary>
            <param name="il2CppPtr">Used by Il2Cpp. Do not use constructor, this is a MonoBehaviour.</param>
        </member>
        <member name="M:MiraAPI.Hud.CustomPlayerMenu.Create">
            <summary>
            Creates a CustomPlayerMenu.
            </summary>
            <returns>New CustomPlayerMenu object.</returns>
        </member>
        <member name="M:MiraAPI.Hud.CustomPlayerMenu.Begin(PlayerTask)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Hud.CustomPlayerMenu.Begin(System.Func{PlayerControl,System.Boolean},System.Action{PlayerControl})">
            <summary>
            Begins/opens the custom player menu.
            </summary>
            <param name="playerMatch">Function to determine if player should show in the custom menu.</param>
            <param name="onClick">Onclick action for player.</param>
        </member>
        <member name="T:MiraAPI.MiraApiPlugin">
            <summary>
            The main plugin class for Mira API.
            </summary>
        </member>
        <member name="P:MiraAPI.MiraApiPlugin.MiraColor">
            <summary>
            Gets the branding Mira API color.
            </summary>
        </member>
        <member name="P:MiraAPI.MiraApiPlugin.DefaultHeaderColor">
            <summary>
            Gets the default color for headers in the options menu.
            </summary>
        </member>
        <member name="M:MiraAPI.MiraApiPlugin.Load">
            <inheritdoc />
        </member>
        <member name="F:MiraAPI.MiraApiPlugin.Id">
            <summary>
            Id of the <see cref="T:MiraAPI.MiraApiPlugin"/>.
            </summary>
        </member>
        <member name="P:MiraAPI.MiraApiPlugin.Name">
            <summary>
            Gets the name of the <see cref="T:MiraAPI.MiraApiPlugin"/>.
            </summary>
        </member>
        <member name="P:MiraAPI.MiraApiPlugin.Version">
            <summary>
            Gets the version of the <see cref="T:MiraAPI.MiraApiPlugin"/>.
            </summary>
        </member>
        <member name="T:MiraAPI.ModCompatibility">
            <summary>
            Mod compatibility tools.
            </summary>
        </member>
        <member name="F:MiraAPI.ModCompatibility.SubmergedId">
            <summary>
            The ID for the Submerged mod.
            </summary>
        </member>
        <member name="M:MiraAPI.ModCompatibility.SubmergedLoaded(System.Reflection.Assembly@)">
            <summary>
            Checks if the Submerged mod is loaded.
            </summary>
            <param name="submergedAssembly">Submerged mod assembly if loaded, null otherwise.</param>
            <returns>True if the Submerged mod is loaded, false otherwise.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.AssignmentConfiguration">
            <summary>
            Represents the assignment configuration for a game modifier.
            </summary>
            <param name="DefaultAmount">The default amount of players that can have this modifier in a game.</param>
            <param name="DefaultChance">The default chance of the modifier being assigned to a player.</param>
            <param name="CreateAmountOption">Whether Mira should create an amount option for the modifier.</param>
            <param name="CreateChanceOption">Whether Mira should create a chance option for the modifier.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.AssignmentConfiguration.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Represents the assignment configuration for a game modifier.
            </summary>
            <param name="DefaultAmount">The default amount of players that can have this modifier in a game.</param>
            <param name="DefaultChance">The default chance of the modifier being assigned to a player.</param>
            <param name="CreateAmountOption">Whether Mira should create an amount option for the modifier.</param>
            <param name="CreateChanceOption">Whether Mira should create a chance option for the modifier.</param>
        </member>
        <member name="P:MiraAPI.Modifiers.AssignmentConfiguration.DefaultAmount">
            <summary>The default amount of players that can have this modifier in a game.</summary>
        </member>
        <member name="P:MiraAPI.Modifiers.AssignmentConfiguration.DefaultChance">
            <summary>The default chance of the modifier being assigned to a player.</summary>
        </member>
        <member name="P:MiraAPI.Modifiers.AssignmentConfiguration.CreateAmountOption">
            <summary>Whether Mira should create an amount option for the modifier.</summary>
        </member>
        <member name="P:MiraAPI.Modifiers.AssignmentConfiguration.CreateChanceOption">
            <summary>Whether Mira should create a chance option for the modifier.</summary>
        </member>
        <member name="T:MiraAPI.Modifiers.BaseModifier">
            <summary>
            Base class for all modifiers.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.Player">
            <summary>
            Gets the player that the modifier is attached to.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.ModifierComponent">
            <summary>
            Gets the modifier component that the modifier is attached to.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.Initialized">
            <summary>
            Gets a value indicating whether the modifier has been initialized.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.UniqueId">
            <summary>
            Gets the unique ID of the modifier.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.TypeId">
            <summary>
            Gets the type ID of the modifier.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.ParentMod">
            <summary>
            Gets the parent mod of the modifier.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.ModifierName">
            <summary>
            Gets the modifier name.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.HideOnUi">
            <summary>
            Gets a value indicating whether the modifier is hidden on the UI.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.ShowInFreeplay">
            <summary>
            Gets a value indicating whether the modifier is shown in the freeplay menu.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.BaseModifier.Unique">
            <summary>
            Gets a value indicating whether the modifier is unique. If true, the player can only have one instance of this modifier.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.GetHudString">
            <summary>
            Gets the HUD information for this modifier. Defaults to the modifier name. Does nothing if <see cref="P:MiraAPI.Modifiers.BaseModifier.HideOnUi"/> is true.
            </summary>
            <returns>The information string for the HUD.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.OnActivate">
            <summary>
            Called when the modifier is activated.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.OnDeactivate">
            <summary>
            Called when the modifier is deactivated.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.Update">
            <summary>
            Called when the modifier is updated. Attached to the ModifierComponent's Update method.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.FixedUpdate">
            <summary>
            Called when the modifier is updated. Attached to the ModifierComponent's FixedUpdate method.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.OnDeath(DeathReason)">
            <summary>
            Called when the player dies.
            </summary>
            <param name="reason">The Death Reason.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.OnMeetingStart">
            <summary>
            Called when a meeting starts.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.BaseModifier.CanVent">
            <summary>
            Determines whether the player can vent.
            </summary>
            <returns>True if the player can vent, false otherwise. Null for no effect.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierComponent">
            <summary>
            The component for handling modifiers.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.#ctor(System.IntPtr)">
            <summary>
            The component for handling modifiers.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.ModifierComponent.ActiveModifiers">
            <summary>
            Gets the active modifiers on the player.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifiers``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets a collection of modifiers by type.
            </summary>
            <param name="predicate">The predicate to check the modifier by.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifiers(System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a collection of modifiers by type.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifiers(System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a collection of modifiers by type ID.
            </summary>
            <param name="id">The modifier's type ID.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.TryGetModifier``1(``0@,System.Func{``0,System.Boolean})">
            <summary>
            Tries to get a modifier by its type.
            </summary>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.TryGetModifier(System.Type,MiraAPI.Modifiers.BaseModifier@,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Tries to get a modifier by its type.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.TryGetModifier(System.UInt32,MiraAPI.Modifiers.BaseModifier@,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Tries to get a modifier by its type ID.
            </summary>
            <param name="id">The modifier type ID.</param>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.TryGetModifier(System.Guid,MiraAPI.Modifiers.BaseModifier@)">
            <summary>
            Tries to get a modifier by its unique ID.
            </summary>
            <param name="modifierGuid">The modifier unique ID.</param>
            <param name="modifier">The modifier or null.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifier``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets a modifier by its type.
            </summary>
            <param name="predicate">The predicate to check the modifier by.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>The Modifier if it is found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifier(System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a modifier by its type.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>The Modifier if it is found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifier(System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a modifier by its type ID.
            </summary>
            <param name="id">The modifier ID.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>The Modifier if it is found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.GetModifier(System.Guid)">
            <summary>
            Gets a modifier by unique ID.
            </summary>
            <param name="modifierGuid">The modifier's unique ID.</param>
            <returns>The modifier if it is found, or null.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.RemoveModifier``1(System.Func{``0,System.Boolean})">
            <summary>
            Removes a modifier from the player.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
            <param name="predicate">The predicate to check the modifier by.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.RemoveModifier(System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Removes a modifier from the player.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.RemoveModifier(MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Removes a modifier from the player.
            </summary>
            <param name="modifier">The modifier object.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.RemoveModifier(System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Removes a modifier from the player.
            </summary>
            <param name="typeId">The modifier's type ID.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.RemoveModifier(System.Guid)">
            <summary>
            Removes a modifier from the player.
            </summary>
            <param name="uniqueId">The modifier's unique ID.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.AddModifier``1(System.Object[])">
            <summary>
            Adds a modifier to the player.
            </summary>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <typeparam name="T">The Type of the modifier.</typeparam>
            <returns>The new modifier.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.AddModifier(MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Adds a modifier to the player.
            </summary>
            <param name="modifier">The modifier to add.</param>
            <returns>The modifier that was added.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.AddModifier(System.Type,System.Object[])">
            <summary>
            Adds a modifier to the player.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <returns>The modifier that was added.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.AddModifier(System.UInt32,System.Object[])">
            <summary>
            Adds a modifier to the player.
            </summary>
            <param name="id">The ID of the modifier.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <returns>The modifier if it was created, or null if it failed.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier``1(System.Func{``0,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type.
            </summary>
            <param name="predicate">The predicate to check the modifier.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>True if the Modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="predicate">The predicate to check the modifier.</param>
            <returns>True if the Modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type ID.
            </summary>
            <param name="id">The modifier's type ID.</param>
            <param name="predicate">The predicate to check the modifier.</param>
            <returns>True if the modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.Guid)">
            <summary>
            Checks if a player has an active modifier by its unique ID.
            </summary>
            <param name="id">The modifier's guid.</param>
            <returns>True if the modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier``1(System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type.
            </summary>
            <param name="checkInactive">Whether to check inactive modifiers (those pending to be added).</param>
            <param name="predicate">The predicate to check the modifier.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>True if the Modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.Type,System.Boolean,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type.
            </summary>
            <param name="type">The modifier type.</param>
            <param name="checkInactive">Whether to check inactive modifiers (those pending to be added).</param>
            <param name="predicate">The predicate to check the modifier.</param>
            <returns>True if the Modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.UInt32,System.Boolean,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if a player has an active modifier by its type ID.
            </summary>
            <param name="id">The modifier's type ID.</param>
            <param name="checkInactive">Whether to check inactive modifiers (those pending to be added).</param>
            <param name="predicate">The predicate to check the modifier.</param>
            <returns>True if the modifier is present, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierComponent.HasModifier(System.Guid,System.Boolean)">
            <summary>
            Checks if a player has an active modifier by its unique ID.
            </summary>
            <param name="id">The modifier's guid.</param>
            <param name="checkInactive">Whether to check inactive modifiers (those pending to be added).</param>
            <returns>True if the modifier is present, false otherwise.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierExtensions">
            <summary>
            Extensions for modifiers.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.ModifierExtensions.ModifierComponents">
            <summary>
            Gets the dictionary to cache ModifierComponents.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcAddModifier(PlayerControl,System.UInt32,System.Object[])">
            <summary>
            Remote Procedure Call to add a modifier to a player.
            </summary>
            <param name="target">The player to add the modifier to.</param>
            <param name="typeId">The modifier type ID.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcAddModifier(PlayerControl,System.Type,System.Object[])">
            <summary>
            Remote Procedure Call to add a modifier to a player.
            </summary>
            <param name="player">The player to add the modifier to.</param>
            <param name="type">The type of the modifier.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcAddModifier``1(PlayerControl,System.Object[])">
            <summary>
            Remote Procedure Call to add a modifier to a player.
            </summary>
            <param name="player">The player to add the modifier to.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <typeparam name="T">The modifier Type.</typeparam>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcRemoveModifier(PlayerControl,System.Guid)">
            <summary>
            Remote Procedure Call to remove a modifier from a player.
            </summary>
            <param name="target">The player to remove the modifier from.</param>
            <param name="uniqueId">The unique ID of the modifier.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcRemoveModifier(PlayerControl,System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Remote Procedure Call to remove a modifier from a player by type ID.
            </summary>
            <param name="target">The player to remove the modifier from.</param>
            <param name="typeId">The type ID of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcRemoveModifier(PlayerControl,System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Remote Procedure Call to remove a modifier from a player.
            </summary>
            <param name="player">The player to remove the modifier from.</param>
            <param name="type">The type of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcRemoveModifier``1(PlayerControl,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Remote Procedure Call to remove a modifier from a player.
            </summary>
            <param name="player">The player to remove the modifier from.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifierComponent(PlayerControl)">
            <summary>
            Gets the ModifierComponent for a player.
            </summary>
            <param name="player">The PlayerControl object.</param>
            <returns>A ModifierComponent if there is one, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.HasModifier``1(PlayerControl,System.Func{``0,System.Boolean})">
            <summary>
            Checks if the player has a specific modifier.
            </summary>
            <typeparam name="T">The type of the modifier.</typeparam>
            <param name="player">The PlayerControl instance.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>True if the player has the modifier, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.HasModifier(PlayerControl,System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if the player has a specific modifier by type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The type of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>True if the player has the modifier, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.HasModifier(PlayerControl,System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Checks if the player has a specific modifier by type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="typeId">The type ID of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>True if the player has the modifier, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.HasModifier(PlayerControl,System.Guid)">
            <summary>
            Checks if the player has a specific modifier by its GUID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="uniqueId">The unique ID of the modifier.</param>
            <returns>True if the player has the modifier, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.ClearModifiers(PlayerControl)">
            <summary>
            Clears all modifiers from a player.
            </summary>
            <param name="plr">The player you want to clear modifiers for.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RpcClearModifiers(PlayerControl)">
            <summary>
            Clears all modifiers from a player.
            </summary>
            <param name="plr">The player you want to clear modifiers for.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.TryGetModifier``1(PlayerControl,``0@,System.Func{``0,System.Boolean})">
            <summary>
            Tries to get a modifier by its type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <typeparam name="T">The Type of the Modifier.</typeparam>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.TryGetModifier(PlayerControl,System.Type,MiraAPI.Modifiers.BaseModifier@,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Tries to get a modifier by its type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The modifier type.</param>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.TryGetModifier(PlayerControl,System.UInt32,MiraAPI.Modifiers.BaseModifier@,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Tries to get a modifier by its type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="id">The modifier type ID.</param>
            <param name="modifier">The modifier or null.</param>
            <param name="predicate">The predicate to check the modifier by.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.TryGetModifier(PlayerControl,System.Guid,MiraAPI.Modifiers.BaseModifier@)">
            <summary>
            Tries to get a modifier by its unique ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="modifierGuid">The modifier unique ID.</param>
            <param name="modifier">The modifier or null.</param>
            <returns>True if the modifier was found, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifier``1(PlayerControl,System.Func{``0,System.Boolean})">
            <summary>
            Gets a specific modifier from the player.
            </summary>
            <typeparam name="T">The type of the modifier.</typeparam>
            <param name="player">The PlayerControl instance.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>The modifier if found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifier(PlayerControl,System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a specific modifier from the player by type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The type of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>The modifier if found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifier(PlayerControl,System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets a specific modifier from the player by its type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="typeId">The type ID of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>The modifier if found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifier(PlayerControl,System.Guid)">
            <summary>
            Gets a specific modifier from the player by its GUID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="uniqueId">The GUID of the modifier.</param>
            <returns>The modifier if found, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifiers``1(PlayerControl,System.Func{``0,System.Boolean})">
            <summary>
            Gets all modifiers of a specific type from the player.
            </summary>
            <typeparam name="T">The type of the modifiers.</typeparam>
            <param name="player">The PlayerControl instance.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifiers(PlayerControl,System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets all modifiers of a specific type from the player.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The type of the modifiers.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.GetModifiers(PlayerControl,System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Gets all modifiers of a specific type from the player by type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="typeId">The type ID of the modifiers.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
            <returns>A collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RemoveModifier(PlayerControl,MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Removes a specific modifier from the player.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="modifier">The modifier to remove.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RemoveModifier``1(PlayerControl,System.Func{``0,System.Boolean})">
            <summary>
            Removes a specific modifier from the player.
            </summary>
            <typeparam name="T">The type of the modifier.</typeparam>
            <param name="player">The PlayerControl instance.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RemoveModifier(PlayerControl,System.Type,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Removes a specific modifier from the player by type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The type of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RemoveModifier(PlayerControl,System.UInt32,System.Func{MiraAPI.Modifiers.BaseModifier,System.Boolean})">
            <summary>
            Removes a specific modifier from the player by its type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="typeId">The type ID of the modifier.</param>
            <param name="predicate">Optional predicate to filter the modifiers.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.RemoveModifier(PlayerControl,System.Guid)">
            <summary>
            Removes a specific modifier from the player by its GUID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="uniqueId">The GUID of the modifier.</param>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.AddModifier``1(PlayerControl,System.Object[])">
            <summary>
            Adds a specific modifier to the player.
            </summary>
            <typeparam name="T">The type of the modifier.</typeparam>
            <param name="player">The PlayerControl instance.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <returns>The added modifier.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.AddModifier(PlayerControl,MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Adds a specific modifier to the player.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="modifier">The modifier to add.</param>
            <returns>The added modifier.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.AddModifier(PlayerControl,System.Type,System.Object[])">
            <summary>
            Adds a specific modifier to the player by type.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="type">The type of the modifier.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <returns>The added modifier.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierExtensions.AddModifier(PlayerControl,System.UInt32,System.Object[])">
            <summary>
            Adds a specific modifier to the player by type ID.
            </summary>
            <param name="player">The PlayerControl instance.</param>
            <param name="typeId">The type ID of the modifier.</param>
            <param name="args">The arguments to initialize the modifier constructor with.</param>
            <returns>The added modifier.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierFactory">
            <summary>
            Factory for creating instances of a modifier. More efficient than using reflection.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates a modifier with the specified type and arguments.
            </summary>
            <param name="type">Modifier type.</param>
            <param name="args">Arguments.</param>
            <returns>An instance of the modifier.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierFactory`1">
            <summary>
            Factory for creating instances of a modifier. More efficient than using reflection.
            </summary>
            <typeparam name="T">The modifier type.</typeparam>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierFactory`1.CreateInstance(System.Object[])">
            <summary>
            Creates an instance of the modifier.
            </summary>
            <param name="args">Parameters for the constructor.</param>
            <returns>An instance of the modifier.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierManager">
            <summary>
            The manager for handling modifiers.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierManager.GetModifierType(System.UInt32)">
            <summary>
            Gets the modifier type from the type id.
            </summary>
            <param name="id">The ID.</param>
            <returns>The Type of the modifier.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierManager.GetModifierTypeId(System.Type)">
            <summary>
            Gets the modifier id from the type.
            </summary>
            <param name="type">The Type.</param>
            <returns>The ID of the modifier.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.ModifierUtils">
            <summary>
            Utilities to make handling modifiers in-game easier.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierUtils.GetActiveModifiers``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets a list of all active in-game modifiers.
            </summary>
            <param name="predicate">Select if modifier is valid to be added to list.</param>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>A list of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.ModifierUtils.GetPlayersWithModifier``1(System.Func{``0,System.Boolean})">
            <summary>
            Gets all players with a certain modifier.
            </summary>
            <param name="predicate">Select if modifier is valid.</param>
            <typeparam name="T">The modifier type.</typeparam>
            <returns>A list of players with that modifier.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.Types.GameModifier">
            <summary>
            The base class for a game modifier. Game modifiers are applied at the start of the game on top of the player's role.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.GameModifier.ShowInFreeplay">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Modifiers.Types.GameModifier.GetAssignmentChance">
            <summary>
            Gets the chance of the modifier being assigned to a player.
            </summary>
            <returns>An int value between 0 and 100 representing percent.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.GameModifier.GetAmountPerGame">
            <summary>
            Gets the amount of players that can have this modifier in a game.
            </summary>
            <returns>An int value greater than or equal to zero.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.GameModifier.Priority">
            <summary>
            Gets the priority at which the modifier will spawn. The higher the value, the higher up on the assignment list.
            </summary>
            <returns>An int value greater than or equal to -1.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.GameModifier.IsModifierValidOn(RoleBehaviour)">
            <summary>
            Determines whether the modifier is valid on a role.
            </summary>
            <param name="role">The role to be checked.</param>
            <returns>True if the modifier is valid on the role, otherwise false.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.GameModifier.DidWin(GameOverReason)">
            <summary>
            Determines whether the player won the game with this modifier.
            </summary>
            <param name="reason">The reason why the game ended.</param>
            <returns>True if the player won, false if they lost. Return null to use the player's default win condition.</returns>
        </member>
        <member name="T:MiraAPI.Modifiers.Types.TimedModifier">
            <summary>
            The base class for all timed modifiers. Timed modifiers have a duration and can be started and stopped.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.Duration">
            <summary>
            Gets the duration of the modifier.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.AutoStart">
            <summary>
            Gets a value indicating whether the timer should start automatically when added.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.RemoveOnComplete">
            <summary>
            Gets a value indicating whether the modifier should be removed when the timer completes.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.OnTimerComplete">
            <summary>
            Called when the timer completes.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.TimerActive">
            <summary>
            Gets or sets a value indicating whether the timer is active.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.TimeRemaining">
            <summary>
            Gets or sets the time remaining on the timer.
            </summary>
        </member>
        <member name="P:MiraAPI.Modifiers.Types.TimedModifier.HideOnUi">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.GetHudString">
            <summary>
            Gets the HUD information for Timed Modifier, including the time remaining.
            </summary>
            <returns>A string with the hud information + timer.</returns>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.FixedUpdate">
            <summary>
            The FixedUpdate method for timed modifiers. Automatically handles the timer logic.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.StartTimer">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.StopTimer">
            <summary>
            Stops the timer and calls OnTimerComplete().
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.ResetTimer">
            <summary>
            Resets the timer. Does not call OnTimerComplete().
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.PauseTimer">
            <summary>
            Pauses the timer.
            </summary>
        </member>
        <member name="M:MiraAPI.Modifiers.Types.TimedModifier.ResumeTimer">
            <summary>
            Pauses the timer.
            </summary>
        </member>
        <member name="T:MiraAPI.Networking.CustomGameOverRpc">
            <summary>
            Custom Game Over RPC.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.CustomGameOverRpc.#ctor(MiraAPI.MiraApiPlugin,System.UInt32)">
            <summary>
            Custom Game Over RPC.
            </summary>
            <inheritdoc />
        </member>
        <member name="P:MiraAPI.Networking.CustomGameOverRpc.LocalHandling">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.CustomGameOverRpc.Write(Hazel.MessageWriter,MiraAPI.GameEnd.GameOverData)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.CustomGameOverRpc.Read(Hazel.MessageReader)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.CustomGameOverRpc.Handle(PlayerControl,MiraAPI.GameEnd.GameOverData)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Networking.CustomMurderRpc">
            <summary>
            Custom murder RPCs to fix issues with default ones.
            </summary>
        </member>
        <member name="M:MiraAPI.Networking.CustomMurderRpc.RpcCustomMurder(PlayerControl,PlayerControl,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Networked Custom Murder method.
            </summary>
            <param name="source">The killer.</param>
            <param name="target">The player to murder.</param>
            <param name="didSucceed">Whether the murder was successful or not.</param>
            <param name="resetKillTimer">Should the kill timer be reset.</param>
            <param name="createDeadBody">Should a dead body be created.</param>
            <param name="teleportMurderer">Should the killer be snapped to the dead player.</param>
            <param name="showKillAnim">Should the kill animation be shown.</param>
            <param name="playKillSound">Should the kill sound be played.</param>
        </member>
        <member name="M:MiraAPI.Networking.CustomMurderRpc.CustomMurder(PlayerControl,PlayerControl,MurderResultFlags,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom Murder method without networking. If you need a networked version, use <see cref="M:MiraAPI.Networking.CustomMurderRpc.RpcCustomMurder(PlayerControl,PlayerControl,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>.
            </summary>
            <param name="source">The killer.</param>
            <param name="target">The player to murder.</param>
            <param name="resultFlags">Murder result flags.</param>
            <param name="resetKillTimer">Should the kill timer be reset.</param>
            <param name="createDeadBody">Should a dead body be created.</param>
            <param name="teleportMurderer">Should the killer be snapped to the dead player.</param>
            <param name="showKillAnim">Should the kill animation be shown.</param>
            <param name="playKillSound">Should the kill sound be played.</param>
        </member>
        <member name="M:MiraAPI.Networking.CustomMurderRpc.CoPerformCustomKill(KillAnimation,PlayerControl,PlayerControl,System.Boolean,System.Boolean)">
            <summary>
            Perform a custom kill animation.
            </summary>
            <param name="anim">The kill animation.</param>
            <param name="source">The murderer.</param>
            <param name="target">The murdered player.</param>
            <param name="createDeadBody">Should a dead body be created.</param>
            <param name="teleportMurderer">Should the murder be teleported.</param>
            <returns>Coroutine.</returns>
        </member>
        <member name="T:MiraAPI.Networking.GuidConverter">
            <summary>
            Converter for <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:MiraAPI.Networking.GuidConverter.Write(Hazel.MessageWriter,System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> to the writer.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.GuidConverter.Read(Hazel.MessageReader,System.Type)">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the reader.
            </summary>
            <inheritdoc />
            <returns>A GUID object.</returns>
        </member>
        <member name="T:MiraAPI.Networking.MiraRpc">
            <summary>
            Mira RPCs.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.SyncGameOptions">
            <summary>
            Syncs the game options.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.SyncRoleOptions">
            <summary>
            Syncs the role options.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.AddModifier">
            <summary>
            Adds a modifier to a player.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.RemoveModifier">
            <summary>
            Removes a modifier from a player.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.SyncModifiers">
            <summary>
            Syncs all modifiers at once.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.CustomMurder">
            <summary>
            Custom Murder RPC.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.CustomGameOver">
            <summary>
            Custom Game Over RPC.
            </summary>
        </member>
        <member name="F:MiraAPI.Networking.MiraRpc.RemoveVote">
            <summary>
            Custom RPC to undo a player's vote.
            </summary>
        </member>
        <member name="T:MiraAPI.Networking.Modifiers.AddModifierRpc">
            <summary>
            Remote procedure call for adding a modifier.
            </summary>
            <param name="plugin">Mira plugin.</param>
            <param name="id">RPC ID.</param>
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.AddModifierRpc.#ctor(MiraAPI.MiraApiPlugin,System.UInt32)">
            <summary>
            Remote procedure call for adding a modifier.
            </summary>
            <param name="plugin">Mira plugin.</param>
            <param name="id">RPC ID.</param>
        </member>
        <member name="P:MiraAPI.Networking.Modifiers.AddModifierRpc.LocalHandling">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.AddModifierRpc.Write(Hazel.MessageWriter,MiraAPI.Networking.Modifiers.ModifierData)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.AddModifierRpc.Read(Hazel.MessageReader)">
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.AddModifierRpc.Handle(PlayerControl,MiraAPI.Networking.Modifiers.ModifierData)">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Networking.Modifiers.ModifierConverter">
            <summary>
            Converter for serializing and deserializing <see cref="T:MiraAPI.Modifiers.BaseModifier"/> objects.
            </summary>
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.ModifierConverter.Write(Hazel.MessageWriter,MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Writes a <see cref="T:MiraAPI.Modifiers.BaseModifier"/> to the writer.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The <see cref="T:MiraAPI.Modifiers.BaseModifier"/> to write.</param>
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.ModifierConverter.Read(Hazel.MessageReader,System.Type)">
            <summary>
            Reads a <see cref="T:MiraAPI.Modifiers.BaseModifier"/> from the reader.
            </summary>
            <param name="reader">The reader to read from.</param>
            <param name="objectType">The type of the object to read.</param>
            <returns>The <see cref="T:MiraAPI.Modifiers.BaseModifier"/> that was read.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the modifier is not found.</exception>
        </member>
        <member name="T:MiraAPI.Networking.Modifiers.ModifierData">
            <summary>
            Modifier data for networking.
            </summary>
            <param name="TypeId">The ID of the modifier.</param>
            <param name="UniqueId">The unique ID of the modifier.</param>
            <param name="Args">Parameters for constructor.</param>
        </member>
        <member name="M:MiraAPI.Networking.Modifiers.ModifierData.#ctor(System.UInt32,System.Guid,System.Object[])">
            <summary>
            Modifier data for networking.
            </summary>
            <param name="TypeId">The ID of the modifier.</param>
            <param name="UniqueId">The unique ID of the modifier.</param>
            <param name="Args">Parameters for constructor.</param>
        </member>
        <member name="P:MiraAPI.Networking.Modifiers.ModifierData.TypeId">
            <summary>The ID of the modifier.</summary>
        </member>
        <member name="P:MiraAPI.Networking.Modifiers.ModifierData.UniqueId">
            <summary>The unique ID of the modifier.</summary>
        </member>
        <member name="P:MiraAPI.Networking.Modifiers.ModifierData.Args">
            <summary>Parameters for constructor.</summary>
        </member>
        <member name="T:MiraAPI.Networking.NetData">
            <summary>
            Used to network data and mark it with an ID.
            </summary>
            <param name="id">The ID of the data.</param>
            <param name="data">The byte[] data.</param>
        </member>
        <member name="M:MiraAPI.Networking.NetData.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Used to network data and mark it with an ID.
            </summary>
            <param name="id">The ID of the data.</param>
            <param name="data">The byte[] data.</param>
        </member>
        <member name="P:MiraAPI.Networking.NetData.Id">
            <summary>
            Gets the ID of the data.
            </summary>
        </member>
        <member name="P:MiraAPI.Networking.NetData.Data">
            <summary>
            Gets the byte[] data.
            </summary>
        </member>
        <member name="M:MiraAPI.Networking.NetData.GetLength">
            <summary>
            Gets the length of the data in bytes.
            </summary>
            <returns>An int representing the number of bytes this NetData takes up.</returns>
        </member>
        <member name="T:MiraAPI.Patches.AmongUsClientSyncPatch">
            <summary>
            Sync all settings to the player when they join the game.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Colors.ScrollingColorsPatch">
            <summary>
            This patch adds scrolling to the colors tab in the player customization menu.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Colors.ScrollingColorsPatch.Postfix(PlayerTab)">
            <summary>
            Add scrolling to the colors tab.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Events.KillAnimationPatches">
            <summary>
            General patches for the KillAnimation class.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Events.KillAnimationPatches.KillAnimPostfix(PlayerControl,PlayerControl)">
            <summary>
            Used to trigger the <see cref="T:MiraAPI.Events.Vanilla.Gameplay.AfterMurderEvent"/>.
            </summary>
            <param name="source">The killer.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:MiraAPI.Patches.Events.MapBehaviourPatches">
            <summary>
            Patch for map related MiraEvents.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Events.SabotageEventPatches">
            <summary>
            Used for patching sabotage/system related MiraEvents.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Events.VentEventPatches">
            <summary>
            Patches to invoke vent related MiraEvents.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.HudManagerPatches">
            <summary>
            General patches for the HudManager class.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.HudManagerPatches.StartPostfix(HudManager)">
            <summary>
            Create custom buttons and arrange them on the hud.
            </summary>
            <param name="__instance">The HudManager instance.</param>
        </member>
        <member name="M:MiraAPI.Patches.HudManagerPatches.SetHudActivePostfix(HudManager,PlayerControl,RoleBehaviour,System.Boolean)">
            <summary>
            Set the custom buttons active when the hud is active.
            </summary>
            <param name="__instance">HudManager instance.</param>
            <param name="localPlayer">The local PlayerControl.</param>
            <param name="role">The player's RoleBehaviour.</param>
            <param name="isActive">Whether the Hud should be set active or not.</param>
        </member>
        <member name="T:MiraAPI.Patches.Hud.ButtonResetPatches">
            <summary>
            Reset button patches
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Hud.ButtonResetPatches.MeetingHudStartPostfix">
            <summary>
            Resets the cooldown and effect of all custom buttons when the meeting starts.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Hud.ButtonResetPatches.ExileControllerReEnableGameplayPostfix">
            <summary>
            Resets the cooldown and effect of all custom buttons after the exile screen is closed.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Options.GameOptionsMenuPatch">
            <summary>
            Patches the GameOptionsMenu to add custom options.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Options.GameOptionsMenuPatch.UpdatePatch(GameOptionsMenu)">
            <summary>
            Update patch for the GameOptionsMenu.
            </summary>
            <param name="__instance">The GameOptionsMenu instance.</param>
        </member>
        <member name="M:MiraAPI.Patches.Options.GameSettingMenuPatches.StartPrefix(GameSettingMenu)">
            <summary>
            Prefix for the <see cref="M:GameSettingMenu.Start"/> method. Sets up the custom options.
            </summary>
            <param name="__instance">The GameSettingMenu instance.</param>
        </member>
        <member name="T:MiraAPI.Patches.Options.SettingPatches">
            <summary>
            Patches for the various game settings.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Options.SettingPatches.ValueStringPatch(FloatGameSetting,System.String@,System.Single)">
            <summary>
            Prefix for the <see cref="M:FloatGameSetting.GetValueString(System.Single)"/> method. Adds support for custom number suffixes.
            </summary>
            <param name="__instance">The FloatGameSetting instance.</param>
            <param name="__result">The result of the GetValueString method.</param>
            <param name="value">The float value.</param>
            <returns>False to skip original method.</returns>
        </member>
        <member name="T:MiraAPI.Patches.PlayerControlPatches">
            <summary>
            General patches for the PlayerControl class.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.EjectionPatches">
            <summary>
            Patches for custom ejection messages.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.GameStartupPatch.StartPostfix">
            <summary>
            This is used for registering roles when the game opens, might be a janky solution, but it works
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.HauntMenuMinigamePatch">
            <summary>
            Patches the haunt menu to show the actual role name rather then team.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.HudManagerPatches">
            <summary>
            HudManager patches for roles.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.HudManagerPatches.SetHudActivePostfix(HudManager,PlayerControl,RoleBehaviour,System.Boolean)">
            <summary>
            Fixes Kill Button not showing for Neutral killing role.
            </summary>
            <param name="__instance">HudManager instance.</param>
            <param name="localPlayer">The local PlayerControl.</param>
            <param name="role">The player's RoleBehaviour.</param>
            <param name="isActive">Whether the Hud should be set active or not.</param>
        </member>
        <member name="M:MiraAPI.Patches.Roles.HudManagerPatches.UpdatePostfix(HudManager)">
            <summary>
            Update custom role tab and custom role hud elements.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.KillButtonPatches">
            <summary>
            Fix kill button issues for neutral killers.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.KillButtonPatches.SetTargetPrefix(KillButton,PlayerControl)">
            <summary>
            SetTarget for custom roles.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.KillButtonPatches.DoClickPrefix(KillButton)">
            <summary>
            Use Custom Murder if player is custom role.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.NameTagPatch">
            <summary>
            Set nametag color depending on visibility.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.RoleBehaviourPatch.PrefixTeamColorGetter(RoleBehaviour,UnityEngine.Color@)">
            <summary>
            Update TeamColor text for Mira roles.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.RoleOptionsCollectionPatch">
            <summary>
            Patches to return the correct role counts.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.RoleOptionsCollectionPatch.GetChancePrefix(AmongUs.GameOptions.RoleTypes,System.Int32@)">
            <summary>
            Set the role chance for custom Launchpad roles based on config
            </summary>
            <returns>Return false to skip original method, true to not.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Roles.RoleOptionsCollectionPatch.GetNumPrefix(AmongUs.GameOptions.RoleTypes,System.Int32@)">
            <summary>
            Set the amount for custom Launchpad roles based on config
            </summary>
            <returns>Return false to skip original method, true to not.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Roles.SabotageButtonPatch.DoClickPrefix(SabotageButton)">
            <summary>
            Patches the Sabotage button to check if the player's custom role can use sabotage.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.TaskPanelPatch.UpdatePrefix(TaskPanelBehaviour)">
            <summary>
            This patch is to override the automatic updating of the y position on the tab (which is in base game)
            because I can't change the custom tab y pos if it's being overriden every frame.
            Im sure there is an easier/better way, but this is the fix that worked for me.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Roles.VentPatches">
            <summary>
            Vent patches for Roles.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Roles.VentPatches.SetOutlinePostfix(Vent,System.Boolean,System.Boolean)">
            <summary>
            Set outline to player's custom role color.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.Stubs.MinigameStubs">
            <summary>
            Reverse patches for Minigames.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.MinigameStubs.Begin(Minigame,PlayerTask)">
            <summary>
            Reverse patch for Minigame.Begin.
            </summary>
            <param name="instance">The Minigame instance.</param>
            <param name="task">Associated PlayerTask.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.MinigameStubs.Close(Minigame)">
            <summary>
            Reverse patch for Minigame.Close.
            </summary>
            <param name="instance">The Minigame instance.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.MinigameStubs.MinigameErrorFixPatch(Minigame)">
            <summary>
            Fixes the error when creating custom minigames. Credit to Submerged for discovering this fix.
            </summary>
            <param name="__instance">The Minigame instance.</param>
        </member>
        <member name="T:MiraAPI.Patches.Stubs.RoleBehaviourStubs">
            <summary>
            Stub methods for the RoleBehaviour class. Needed because of Il2Cpp limitations on injected classes.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.Initialize(RoleBehaviour,PlayerControl)">
            <summary>
            Stub method for RoleBehaviour.Initialize.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="player">The PlayerControl to initialize.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.AdjustTasks(RoleBehaviour,PlayerControl)">
            <summary>
            Stub method for RoleBehaviour.AdjustTasks.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="player">The PlayerControl to adjust tasks for.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.AppendTaskHint(RoleBehaviour,Il2CppSystem.Text.StringBuilder)">
            <summary>
            Stub method for RoleBehaviour.AppendTaskHint.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="taskStringBuilder">The StringBuilder to append the task hint to.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.CanUse(RoleBehaviour,IUsable)">
            <summary>
            Stub method for RoleBehaviour.CanUse.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="console">The IUsable console to check.</param>
            <returns>Whether the console can be used.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.Deinitialize(RoleBehaviour,PlayerControl)">
            <summary>
            Stub method for RoleBehaviour.Deinitialize.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="targetPlayer">The PlayerControl to deinitialize for.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.DidWin(RoleBehaviour,GameOverReason)">
            <summary>
            Stub method for RoleBehaviour.DidWin.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="gameOverReason">The reason for game over.</param>
            <returns>Whether the role won.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.FindClosestTarget(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.FindClosestTarget.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <returns>The closest target PlayerControl.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.GetAbilityDistance(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.GetAbilityDistance.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <returns>The ability distance.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.IsValidTarget(RoleBehaviour,NetworkedPlayerInfo)">
            <summary>
            Stub method for RoleBehaviour.IsValidTarget.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="target">The NetworkedPlayerInfo to validate.</param>
            <returns>Whether the target is valid.</returns>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.OnDeath(RoleBehaviour,DeathReason)">
            <summary>
            Stub method for RoleBehaviour.OnDeath.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="reason">The reason for death.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.OnMeetingStart(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.OnMeetingStart.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.OnVotingComplete(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.OnVotingComplete.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.SetCooldown(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.SetCooldown.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.SetPlayerTarget(RoleBehaviour,PlayerControl)">
            <summary>
            Stub method for RoleBehaviour.SetPlayerTarget.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="target">The PlayerControl target to set.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.SetUsableTarget(RoleBehaviour,IUsable)">
            <summary>
            Stub method for RoleBehaviour.SetUsableTarget.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="target">The IUsable target to set.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.SpawnTaskHeader(RoleBehaviour,PlayerControl)">
            <summary>
            Stub method for RoleBehaviour.SpawnTaskHeader.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
            <param name="playerControl">The PlayerControl to spawn the task header for.</param>
        </member>
        <member name="M:MiraAPI.Patches.Stubs.RoleBehaviourStubs.UseAbility(RoleBehaviour)">
            <summary>
            Stub method for RoleBehaviour.UseAbility.
            </summary>
            <param name="instance">The RoleBehaviour object.</param>
        </member>
        <member name="T:MiraAPI.Patches.VentCanUsePatch">
            <summary>
            Used to change vent behaviour for the event system, custom roles, and modifiers.
            </summary>
        </member>
        <member name="T:MiraAPI.Patches.VentPatches">
            <summary>
            Vent patches to make sure the player is able to use the vent.
            </summary>
        </member>
        <member name="M:MiraAPI.Patches.VentPatches.VentCanUsePostfix(Vent,System.Single@,NetworkedPlayerInfo,System.Boolean@,System.Boolean@)">
            <summary>
            CanUse patch.
            </summary>
        </member>
        <member name="T:MiraAPI.PluginLoading.MiraIgnoreAttribute">
            <summary>
            Skip an element during plugin loading.
            </summary>
        </member>
        <member name="T:MiraAPI.PluginLoading.MiraPluginInfo">
            <summary>
            Represents a Mira plugin.
            </summary>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginInfo.GetModifiers">
            <summary>
            Get a read only collection of this plugin's modifiers. This is probably not safe because they are uninitialized.
            </summary>
            <returns>Readonly collection of modifiers.</returns>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginInfo.GetOptionGroups">
            <summary>
            Get a read only collection of this plugin's Option Groups.
            </summary>
            <returns>Readonly collection of option groups.</returns>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginInfo.GetOptions">
            <summary>
            Gets a read only collection of this plugin's options.
            </summary>
            <returns>Read only collection of options.</returns>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginInfo.GetRoles">
            <summary>
            Gets a read only dictionary of Role IDs and the RoleBehaviour object they are associated with.
            </summary>
            <returns>Read only dictionary of IDs and Roles.</returns>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginInfo.GetButtons">
            <summary>
            Gets a read only collection of this plugin's custom buttons.
            </summary>
            <returns>Read only collection of buttons.</returns>
        </member>
        <member name="P:MiraAPI.PluginLoading.MiraPluginInfo.PluginId">
            <summary>
            Gets the plugin's ID, as defined in the plugin's BepInEx metadata.
            </summary>
        </member>
        <member name="P:MiraAPI.PluginLoading.MiraPluginInfo.MiraPlugin">
            <summary>
            Gets the plugin's instance as an <see cref="T:MiraAPI.PluginLoading.IMiraPlugin"/>.
            </summary>
        </member>
        <member name="P:MiraAPI.PluginLoading.MiraPluginInfo.PluginInfo">
            <summary>
            Gets the plugin's BepInEx metadata.
            </summary>
        </member>
        <member name="P:MiraAPI.PluginLoading.MiraPluginInfo.PluginConfig">
            <summary>
            Gets the plugin's configuration file.
            </summary>
        </member>
        <member name="T:MiraAPI.PluginLoading.MiraPluginManager">
            <summary>
            Mira Plugin manager.
            </summary>
        </member>
        <member name="M:MiraAPI.PluginLoading.MiraPluginManager.GetPluginByGuid(System.String)">
            <summary>
            Get a mira plugin by its GUID.
            </summary>
            <param name="pluginId">The plugin GUID.</param>
            <returns>A MiraPluginInfo.</returns>
        </member>
        <member name="T:MiraAPI.Roles.CustomRoleConfiguration">
            <summary>
            Used to configure the specific settings of a role.
            </summary>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleConfiguration.#ctor(MiraAPI.Roles.ICustomRole)">
            <summary>
            Initializes a new instance of the <see cref="T:MiraAPI.Roles.CustomRoleConfiguration"/> struct.
            </summary>
            <param name="role">The role in which you are configuring.</param>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.MaxRoleCount">
            <summary>
            Gets or sets the hard limit of players that can have this role. This property is used to set a limit in the Role Options menu. If set to 0, the role will not be assigned at start.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.DefaultRoleCount">
            <summary>
            Gets or sets the default role count.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.DefaultChance">
            <summary>
            Gets or sets the default role chance.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.CanModifyChance">
            <summary>
            Gets or sets a value indicating whether the chance option can be changed or not.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.OptionsScreenshot">
            <summary>
            Gets or sets the Sprite used for the Role Options menu screenshot.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.Icon">
            <summary>
            Gets or sets the Sprite used for the Role Icon.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.IntroSound">
            <summary>
            Gets or sets the Intro sound for the Role.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.AffectedByLightOnAirship">
            <summary>
            Gets or sets a value indicating whether the role is affected by light affectors on Airship.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.CanGetKilled">
            <summary>
            Gets or sets a value indicating whether the role can be killed by vanilla murder system.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.UseVanillaKillButton">
            <summary>
            Gets or sets a value indicating whether the role should use the vanilla kill button.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.CanUseVent">
            <summary>
            Gets or sets a value indicating whether the role can use vents.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.CanUseSabotage">
            <summary>
            Gets or sets a value indicating whether the role can use the sabotage button.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.TasksCountForProgress">
            <summary>
            Gets or sets a value indicating whether the role's tasks count towards task progress.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.HideSettings">
            <summary>
            Gets or sets a value indicating whether the role should show up in the Role Options menu.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.ShowInFreeplay">
            <summary>
            Gets or sets a value indicating whether the role should show up in the Freeplay Role Selection menu.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.KillButtonOutlineColor">
            <summary>
            Gets or sets the outline color for the KillButton if <see cref="P:MiraAPI.Roles.CustomRoleConfiguration.UseVanillaKillButton"/> is true.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.RoleHintType">
            <summary>
            Gets or sets the role hint style. See <see cref="P:MiraAPI.Roles.CustomRoleConfiguration.RoleHintType"/> enum for all options.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleConfiguration.GhostRole">
            <summary>
            Gets or sets the Ghost role that is applied when the player is killed.
            </summary>
        </member>
        <member name="T:MiraAPI.Roles.CustomRoleManager">
            <summary>
            Custom role manager for handling custom roles.
            </summary>
        </member>
        <member name="F:MiraAPI.Roles.CustomRoleManager.CrewmateIntroSound">
            <summary>
            The default Among Us Crewmate Intro Sound.
            </summary>
        </member>
        <member name="F:MiraAPI.Roles.CustomRoleManager.ImpostorIntroSound">
            <summary>
            The default Among Us Impostor Intro Sound.
            </summary>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleManager.FindParentMod(MiraAPI.Roles.ICustomRole)">
            <summary>
            Finds the parent mod of a custom role.
            </summary>
            <param name="role">The ICustomRole object.</param>
            <returns>A MiraPluginInfo object representing the parent mod of the role.</returns>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleManager.GetCustomRoleBehaviour(AmongUs.GameOptions.RoleTypes,MiraAPI.Roles.ICustomRole@)">
            <summary>
            Gets a custom role behaviour by role type.
            </summary>
            <param name="roleType">The role type enum.</param>
            <param name="result">The ICustomRole result.</param>
            <returns>True if the role was found.</returns>
        </member>
        <member name="T:MiraAPI.Roles.CustomRoleSingleton`1">
            <summary>
            A utility class to get the instance of a custom role.
            </summary>
            <typeparam name="T">The role you are trying to access.</typeparam>
        </member>
        <member name="P:MiraAPI.Roles.CustomRoleSingleton`1.Instance">
            <summary>
            Gets the instance of the role.
            </summary>
        </member>
        <member name="T:MiraAPI.Roles.CustomRoleUtils">
            <summary>
            Utilities to make handling roles in-game easier.
            </summary>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleUtils.GetActiveRoles">
            <summary>
            Gets all active in-game roles.
            </summary>
            <returns>A list of roles.</returns>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleUtils.GetActiveRolesOfTeam(MiraAPI.Roles.ModdedRoleTeams)">
            <summary>
            Gets all active in-game roles in a certain team.
            </summary>
            <param name="team">The team you would like to check for.</param>
            <returns>A list of roles with the team.</returns>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleUtils.GetActiveRolesOfType``1">
            <summary>
            Gets all active in-game roles of a certain type.
            </summary>
            <typeparam name="T">The role Type you would like to check for. Must be a RoleBehaviour.</typeparam>
            <returns>A list of roles with that specific type.</returns>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleUtils.CreateForRole(MiraAPI.Roles.ICustomRole)">
            <summary>
            Creates a string builder for the Role Tab.
            </summary>
            <param name="role">The ICustomRole object.</param>
            <returns>A StringBuilder.</returns>
        </member>
        <member name="M:MiraAPI.Roles.CustomRoleUtils.GetIntroSound(AmongUs.GameOptions.RoleTypes)">
            <summary>
            Returns an intro sound from a role.
            </summary>
            <param name="roleType">The role type.</param>
            <returns>The intro sound.</returns>
        </member>
        <member name="T:MiraAPI.Roles.ICustomRole">
            <summary>
            Interface for custom roles.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.RoleName">
            <summary>
            Gets the name of the role.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.RoleDescription">
            <summary>
            Gets the description of the role. Used in the Intro Cutscene.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.RoleLongDescription">
            <summary>
            Gets the long description of the role. Used in the Role Tab and Role Options.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.RoleColor">
            <summary>
            Gets the color of the role.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.OptionsMenuColor">
            <summary>
            Gets the color that should be used in the options menu.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.Team">
            <summary>
            Gets the team of the role.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.Configuration">
            <summary>
            Gets advanced settings of the role.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.RoleOptionsGroup">
            <summary>
            Gets the role options group.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.IntroConfiguration">
            <summary>
            Gets the role's TeamIntroCutscene configuration.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.ICustomRole.ParentMod">
            <summary>
            Gets the parent mod of this role.
            </summary>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.PlayerControlFixedUpdate(PlayerControl)">
            <summary>
            This method runs on the PlayerControl.FixedUpdate method for ALL players with this role.
            </summary>
            <param name="playerControl">The PlayerControl that has this role.</param>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.GetChance">
            <summary>
            Gets the role chance option.
            </summary>
            <returns>The role chance option.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.GetCount">
            <summary>
            Gets the role count option.
            </summary>
            <returns>The role count option.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.SetChance(System.Int32)">
            <summary>
            Sets the role chance option.
            </summary>
            <param name="chance">The chance between 0 and 100.</param>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.SetCount(System.Int32)">
            <summary>
            Sets the role count option.
            </summary>
            <param name="count">The amount of this role between zero and its MaxRoleCount in the Configuration.</param>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.CanLocalPlayerSeeRole(PlayerControl)">
            <summary>
            Whether the local player can see this role.
            </summary>
            <param name="player">The player with the role.</param>
            <returns>Whether they can see the role (name color) or not.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.SetupIntroTeam(IntroCutscene,Il2CppSystem.Collections.Generic.List{PlayerControl}@)">
            <summary>
            Allows the role to specify who is shown on the intro team screen.
            </summary>
            <param name="instance">The intro cutscene instance.</param>
            <param name="yourTeam">The reference to the list of player in the team.</param>
            <returns>True to use the original team intro code, false to skip.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.HudUpdate(HudManager)">
            <summary>
            This method runs on the HudManager.Update method ONLY when the LOCAL player has this role.
            </summary>
            <param name="hudManager">Reference to HudManager instance.</param>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.GetCustomEjectionMessage(NetworkedPlayerInfo)">
            <summary>
            Gets a custom ejection message for the role. Return null to use the default message.
            </summary>
            <param name="player">The NetworkedPlayerInfo object for this player.</param>
            <returns>A string with a custom ejection message or null.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.SetTabText">
            <summary>
            Get the custom Role Tab text for this role.
            </summary>
            <returns>A StringBuilder with the role tab text.</returns>
        </member>
        <member name="M:MiraAPI.Roles.ICustomRole.IsModifierApplicable(MiraAPI.Modifiers.BaseModifier)">
            <summary>
            Determine whether a given modifier can be applied to this role.
            </summary>
            <param name="modifier">The modifier to be tested.</param>
            <returns>True if the modifier is valid on this role, false otherwise.</returns>
        </member>
        <member name="T:MiraAPI.Roles.RoleHintType">
            <summary>
            The type of hint style for a role to use.
            </summary>
        </member>
        <member name="F:MiraAPI.Roles.RoleHintType.None">
            <summary>
            No hint.
            </summary>
        </member>
        <member name="F:MiraAPI.Roles.RoleHintType.TaskHint">
            <summary>
            Original game style (hint above tasks).
            </summary>
        </member>
        <member name="F:MiraAPI.Roles.RoleHintType.RoleTab">
            <summary>
            Use Mira's custom role tab.
            </summary>
        </member>
        <member name="T:MiraAPI.Roles.RoleOptionsGroup">
            <summary>
            Represents a group of roles.
            </summary>
            <param name="Name">The group's name.</param>
            <param name="Color">The group's color.</param>
            <param name="Priority">The priority to sort by on role setting screen. Negative means first.</param>
        </member>
        <member name="M:MiraAPI.Roles.RoleOptionsGroup.#ctor(System.String,UnityEngine.Color,System.Int32)">
            <summary>
            Represents a group of roles.
            </summary>
            <param name="Name">The group's name.</param>
            <param name="Color">The group's color.</param>
            <param name="Priority">The priority to sort by on role setting screen. Negative means first.</param>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Name">
            <summary>The group's name.</summary>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Color">
            <summary>The group's color.</summary>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Priority">
            <summary>The priority to sort by on role setting screen. Negative means first.</summary>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Crewmate">
            <summary>
            Gets the default group for crewmates.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Impostor">
            <summary>
            Gets the default group for impostors.
            </summary>
        </member>
        <member name="P:MiraAPI.Roles.RoleOptionsGroup.Neutral">
            <summary>
            Gets the default group for neutral roles.
            </summary>
        </member>
        <member name="T:MiraAPI.Roles.TeamIntroConfiguration">
            <summary>
            Used to configure the TEAM part of the intro cutscene.
            </summary>
            <param name="IntroTeamColor">The color to show during the "Team" part of the intro cutscene.</param>
            <param name="IntroTeamTitle">The title text to show during the "Team" part of the intro cutscene.</param>
            <param name="IntroTeamDescription">The description text to show during the "Team" part of the intro cutscene.</param>
        </member>
        <member name="M:MiraAPI.Roles.TeamIntroConfiguration.#ctor(UnityEngine.Color,System.String,System.String)">
            <summary>
            Used to configure the TEAM part of the intro cutscene.
            </summary>
            <param name="IntroTeamColor">The color to show during the "Team" part of the intro cutscene.</param>
            <param name="IntroTeamTitle">The title text to show during the "Team" part of the intro cutscene.</param>
            <param name="IntroTeamDescription">The description text to show during the "Team" part of the intro cutscene.</param>
        </member>
        <member name="P:MiraAPI.Roles.TeamIntroConfiguration.IntroTeamColor">
            <summary>The color to show during the "Team" part of the intro cutscene.</summary>
        </member>
        <member name="P:MiraAPI.Roles.TeamIntroConfiguration.IntroTeamTitle">
            <summary>The title text to show during the "Team" part of the intro cutscene.</summary>
        </member>
        <member name="P:MiraAPI.Roles.TeamIntroConfiguration.IntroTeamDescription">
            <summary>The description text to show during the "Team" part of the intro cutscene.</summary>
        </member>
        <member name="P:MiraAPI.Roles.TeamIntroConfiguration.Neutral">
            <summary>
            Gets the default configuration for the "Neutral" team.
            </summary>
        </member>
        <member name="T:MiraAPI.Utilities.Assets.LoadableAsset`1">
            <summary>
            An abstract class that provides a simple pattern for loading assets.
            Mira uses the <see cref="T:MiraAPI.Utilities.Assets.LoadableAsset`1"/> pattern in various locations.
            You can create your own implementation of this class to load assets in different ways.
            </summary>
            <typeparam name="T">The type of the asset to be loaded.</typeparam>
        </member>
        <member name="P:MiraAPI.Utilities.Assets.LoadableAsset`1.LoadedAsset">
            <summary>
            Gets or sets reference to the loaded asset. Intended to be used for caching purposes.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableAsset`1.LoadAsset">
            <summary>
            Loads the asset from the source.
            </summary>
            <returns>The loaded asset.</returns>
        </member>
        <member name="T:MiraAPI.Utilities.Assets.LoadableAudioResourceAsset">
            <summary>
            A utility class for loading .WAV audio assets from the DLL's embedded resources.
            </summary>
            <param name="path">The path of the wave file.</param>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableAudioResourceAsset.#ctor(System.String)">
            <summary>
            A utility class for loading .WAV audio assets from the DLL's embedded resources.
            </summary>
            <param name="path">The path of the wave file.</param>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableAudioResourceAsset.LoadAsset">
            <summary>
            Loads the asset from embedded resources.
            </summary>
            <returns>The asset to load.</returns>
            <exception cref="T:System.NotSupportedException">Attempted to load an Audio file in non WAV format.</exception>
            <exception cref="T:System.Resources.MissingManifestResourceException">Stream failed to load. Check if the name of your asset was correct.</exception>
        </member>
        <member name="T:MiraAPI.Utilities.Assets.LoadableBundleAsset`1">
            <summary>
            A utility class for loading assets from an asset bundle.
            </summary>
            <param name="name">The name of the asset.</param>
            <param name="bundle">The AssetBundle that contains the asset.</param>
            <typeparam name="T">The type of the asset to be loaded.</typeparam>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableBundleAsset`1.#ctor(System.String,UnityEngine.AssetBundle)">
            <summary>
            A utility class for loading assets from an asset bundle.
            </summary>
            <param name="name">The name of the asset.</param>
            <param name="bundle">The AssetBundle that contains the asset.</param>
            <typeparam name="T">The type of the asset to be loaded.</typeparam>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableBundleAsset`1.LoadAsset">
            <summary>
            Loads the asset from the asset bundle.
            </summary>
            <returns>The asset.</returns>
            <exception cref="T:System.Exception">The asset did not load properly.</exception>
        </member>
        <member name="T:MiraAPI.Utilities.Assets.LoadableResourceAsset">
            <summary>
            A utility class for loading assets from embedded resources.
            </summary>
            <param name="path">The path to the embedded resource.</param>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableResourceAsset.#ctor(System.String,System.Single)">
            <summary>
            A utility class for loading assets from embedded resources.
            </summary>
            <param name="path">The path to the embedded resource.</param>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.LoadableResourceAsset.LoadAsset">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Utilities.Assets.PreloadedAsset`1">
            <summary>
            An implementation for creating loadable assets from preloaded assets.
            </summary>
            <inheritdoc cref="T:MiraAPI.Utilities.Assets.LoadableAsset`1"/>
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Utilities.Assets.PreloadedAsset`1.#ctor(`0)">
            <summary>
            An implementation for creating loadable assets from preloaded assets.
            </summary>
            <inheritdoc cref="T:MiraAPI.Utilities.Assets.LoadableAsset`1"/>
            <inheritdoc />
        </member>
        <member name="M:MiraAPI.Utilities.Assets.PreloadedAsset`1.LoadAsset">
            <inheritdoc />
        </member>
        <member name="T:MiraAPI.Utilities.Assets.SpriteTools">
            <summary>
            A utility class for various sprite-related operations.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.Assets.SpriteTools.LoadSpriteFromPath(System.String,System.Reflection.Assembly,System.Single)">
            <summary>
            Load a sprite from a resource path.
            </summary>
            <param name="resourcePath">The path to the resource.</param>
            <returns>A sprite made from the resource.</returns>
            <exception cref="T:System.Exception">The resource cannot be found.</exception>
        </member>
        <member name="T:MiraAPI.Utilities.ColorExtensions">
            <summary>
            Extension methods for the Color struct.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.ColorExtensions.GetRelativeLuminance(UnityEngine.Color)">
            <summary>
            Gets the relative luminance of a color (WCAG 2.1 specification). 0 is black, 1 is white.
            </summary>
            <param name="color">Color to calculate luminance for.</param>
            <returns>Luminance value between 0 and 1.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.ColorExtensions.GetContrastRatio(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Calculates the contrast ratio between two colors (WCAG 2.1 specification).
            </summary>
            <param name="colorA">First color.</param>
            <param name="colorB">Second color.</param>
            <returns>Contrast ratio between the two colors.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.ColorExtensions.FindAlternateColor(UnityEngine.Color,System.Single)">
            <summary>
            Generates an accessible alternate color with sufficient contrast.
            </summary>
            <param name="color">Base color.</param>
            <param name="desiredRatio">Target contrast ratio (default 4.5f for AA).</param>
            <returns>Alternate color with sufficient contrast.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.ColorExtensions.FindMinimumContrastColor(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Finds the color with the minimum contrast ratio to the target color.
            </summary>
            <param name="baseColor">The base color to start from.</param>
            <param name="targetColor">The target color to compare against.</param>
            <param name="desiredRatio">The desired contrast ratio.</param>
            <returns>The color with the minimum contrast ratio to the target color.</returns>
        </member>
        <member name="T:MiraAPI.Utilities.Extensions">
            <summary>
            Extension methods for various classes.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetPlayer(PlayerVoteArea)">
            <summary>
            Gets a PlayerControl from their PlayerVoteArea in a meeting.
            </summary>
            <param name="state">The vote area.</param>
            <returns>The player's PlayerControl.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetTasksLeft(PlayerControl)">
            <summary>
            Gets an int representing the amount of tasks a player has left.
            </summary>
            <param name="player">The player.</param>
            <returns>A count of how many tasks the player has left.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.IsHost(PlayerControl)">
            <summary>
            Checks if a PlayerControl is the game's host.
            </summary>
            <param name="playerControl">The player you're checking for.</param>
            <returns>If the player is the host, true, else false.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.IsInteger(System.Single)">
            <summary>
            Determines if a float is an integer.
            </summary>
            <param name="number">The float number.</param>
            <returns>True if the float is an integer, false otherwise.</returns>
        </member>
        <member name="P:MiraAPI.Utilities.Extensions.VoteDataComponents">
            <summary>
            Gets a cache of player's vote data components to improve performance.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetVoteData(PlayerControl)">
            <summary>
            Gets the PlayerVoteData of a player.
            </summary>
            <param name="player">The PlayerControl object.</param>
            <returns>A PlayerVoteData if there is one, null otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetBestConstructor(System.Type,System.Object[])">
            <summary>
            Gets the best constructor for a type based on the specified arguments.
            </summary>
            <param name="type">The type to get the constructor from.</param>
            <param name="args">The arguments to pass into the constructor.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.ToDisplayString(System.Enum)">
            <summary>
            Gets a proper string for an enum. (with spaces).
            </summary>
            <param name="enum">The enum you would like to change.</param>
            <returns>A proper string for the enum.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetValidConstructors(System.Type,System.Object[])">
            <summary>
            Gets the constructors of a type that match the specified arguments.
            </summary>
            <param name="type">The type to get constructors from.</param>
            <param name="args">The arguments to pass into the constructor.</param>
            <returns>A collection of valid constructors.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetInheritanceDistance(System.Type,System.Type)">
            <summary>
            Calculates the inheritance distance from the given type to its target base type.
            Lower values mean the type is a closer match.
            </summary>
            <param name="from">The derived type.</param>
            <param name="to">The base type.</param>
            <returns>The distance between the types.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.EnableStencilMasking(TMPro.TMP_Text)">
            <summary>
            Enables stencil masking on a TMP text object.
            </summary>
            <param name="text">The TMP text.</param>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.IsStatic(System.Type)">
            <summary>
            Checks if a type is static.
            </summary>
            <param name="type">The type being checked.</param>
            <returns>True if the type is static, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetShadowColor(UnityEngine.Color32,System.Byte)">
            <summary>
            Gets a darkened version of a color.
            </summary>
            <param name="color">The original color.</param>
            <param name="darknessAmount">A darkness amount between 0 and 255.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string to a specified length.
            </summary>
            <param name="value">The original string.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="truncationSuffix">An option suffix to attach at the end of the truncated string.</param>
            <returns>A truncated string of maxLength with the attached suffix.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.ChunkNetData(System.Collections.Generic.IEnumerable{MiraAPI.Networking.NetData},System.Int32)">
            <summary>
            Chunks a collection of NetData into smaller arrays.
            </summary>
            <param name="dataCollection">A collection of NetData objects.</param>
            <param name="chunkSize">The max chunk size in bytes.</param>
            <returns>A Queue of NetData arrays.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.IsCustom(OptionBehaviour)">
            <summary>
            Determines if a given OptionBehaviour is for a custom option.
            </summary>
            <param name="optionBehaviour">The OptionBehaviour to be tested.</param>
            <returns>True if the OptionBehaviour is for a custom options, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.Randomize``1(System.Collections.Generic.List{``0})">
            <summary>
            Randomizes a list.
            </summary>
            <param name="list">The list object.</param>
            <typeparam name="T">The type of object the list contains.</typeparam>
            <returns>A randomized list made from the original list.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.DarkenColor(UnityEngine.Color,System.Single)">
            <summary>
            Darkens a color by a specified amount.
            </summary>
            <param name="color">The original color.</param>
            <param name="amount">A float amount between 0 and 1.</param>
            <returns>The darkened color.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetAlternateColor(UnityEngine.Color,System.Single)">
            <summary>
            Gets an alternate color based on the original color.
            </summary>
            <param name="color">The original color.</param>
            <param name="amount">The amount to darken or lighten the original color by between 0.0 and 1.0.</param>
            <returns>An alternate color that has been darkened or lightened.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.LightenColor(UnityEngine.Color,System.Single)">
            <summary>
            Lightens a color by a specified amount.
            </summary>
            <param name="color">The original color.</param>
            <param name="amount">A float amount between 0.0 and 1.0.</param>
            <returns>The lightened color.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.IsColorDark(UnityEngine.Color)">
            <summary>
            Checks if a color is dark.
            </summary>
            <param name="color">The color to check.</param>
            <returns>True if the color is dark, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetNearestDeadBody(PlayerControl,System.Single)">
            <summary>
            Gets the nearest dead body to a player.
            </summary>
            <param name="playerControl">The player object.</param>
            <param name="radius">The radius to search within.</param>
            <returns>The dead body if it is found, or null there is none within the radius.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetNearestObjectOfType``1(PlayerControl,System.Single,UnityEngine.ContactFilter2D,System.String,System.Predicate{``0})">
            <summary>
            Finds the nearest object of a specified type to a player. It will only work if the object has a collider.
            </summary>
            <param name="playerControl">The player object.</param>
            <param name="radius">The radius to search within.</param>
            <param name="filter">The contact filter.</param>
            <param name="colliderTag">An optional collider tag.</param>
            <param name="predicate">Optional predicate to test if the object is valid.</param>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>The object if it was found, or null if there is none within the radius.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.GetClosestPlayer(PlayerControl,System.Boolean,System.Single,System.Boolean,System.Predicate{PlayerControl})">
            <summary>
            Gets the closest player that matches the given criteria.
            </summary>
            <param name="playerControl">The player object.</param>
            <param name="includeImpostors">Whether impostors should be included in the search.</param>
            <param name="distance">The radius to search within.</param>
            <param name="ignoreColliders">Whether colliders should be ignored when searching.</param>
            <param name="predicate">Optional predicate to test if the object is valid.</param>
            <returns>The closest player if there is one, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Extensions.UpdateOutline(UnityEngine.Renderer,System.Nullable{UnityEngine.Color})">
            <summary>
            Fixed version of Reactor's SetOutline.
            </summary>
            <param name="renderer">The renderer you want to update the outline for.</param>
            <param name="color">The outline color.</param>
        </member>
        <member name="T:MiraAPI.Utilities.Helpers">
            <summary>
            A class that contains helper methods.
            </summary>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetAlivePlayers">
            <summary>
            Get all living players.
            </summary>
            <returns>A list of alive players.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CheckChance(System.Int32)">
            <summary>
            Determines whether a given probability check succeeds.
            </summary>
            <param name="probability">An integer value representing the success probability (0-100).</param>
            <returns>True if the number falls in the range, false if not.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetVentById(System.Int32)">
            <summary>
            Retrieves a vent from the ID.
            </summary>
            <param name="id">The vent ID.</param>
            <returns>The vent.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CreateArrow(UnityEngine.Transform,UnityEngine.Color)">
            <summary>
            Creates an arrow.
            </summary>
            <param name="parent">The arrow gameObject's parent.</param>
            <param name="color">The color of the arrow.</param>
            <returns>The created ArrowBehaviour.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.FindClosestObjectOfType``1(System.Collections.Generic.List{``0},UnityEngine.Vector3)">
            <summary>
            Get the closest object of a specific type.
            </summary>
            <param name="objectList">A list of all the objects you'd like to check the distance for.</param>
            <param name="position">The position of where you want to check from. For example: PlayerControl.LocalPlayer.transform.position.</param>
            <typeparam name="T">The object type.</typeparam>
            <returns>The closest object.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CreateAndShowNotification(System.String,UnityEngine.Color,UnityEngine.AudioClip,UnityEngine.Sprite)">
            <summary>
            Creates and shows a notification.
            </summary>
            <param name="text">The text you want to display.</param>
            <param name="color">The color of the text and image.</param>
            <param name="clip">The sound you want to play with the notification.</param>
            <param name="spr">The sprite beside the notification.</param>
            <returns>The created notification.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CreateAndShowNotification(System.String,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.AudioClip,UnityEngine.Sprite)">
            <summary>
            Creates and shows a notification.
            </summary>
            <param name="text">The text you want to display.</param>
            <param name="color">The color of the text and image.</param>
            <param name="localPos">The position of the notification.</param>
            <param name="clip">The sound you want to play with the notification.</param>
            <param name="spr">The sprite beside the notification.</param>
            <returns>The created notification.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.EmptyCoroutine">
            <summary>
            Returns an empty coroutine.
            </summary>
            <returns>Empty coroutine.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CreateFilter(System.Int32)">
            <summary>
            Creates a ContactFilter2D from a layer mask.
            </summary>
            <param name="layerMask">The layer mask.</param>
            <returns>A new ContactFilter2D that represents the layer mask.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetRoom(UnityEngine.Vector3)">
            <summary>
            Get the room at a specific position.
            </summary>
            <param name="pos">The position.</param>
            <returns>The ship room if its found.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetNearestDeadBodies(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D)">
            <summary>
            Gets a list of dead bodies within a radius.
            </summary>
            <param name="source">The source location.</param>
            <param name="radius">The radius to search in.</param>
            <param name="filter">The contact filter.</param>
            <returns>A list of dead bodies.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetNearestObjectsOfType``1(UnityEngine.Vector2,System.Single,UnityEngine.ContactFilter2D,System.String)">
            <summary>
            Gets a list of objects within a radius.
            </summary>
            <param name="source">The source point.</param>
            <param name="radius">The radius to search in.</param>
            <param name="filter">The contact filter.</param>
            <param name="colliderTag">An optional collider tag.</param>
            <typeparam name="T">The type of the object.</typeparam>
            <returns>A list of objects of type T.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetClosestPlayersInCircle(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
            Gets the closest players to a specific point.
            </summary>
            <param name="source">The source point.</param>
            <param name="radius">The radius to search in.</param>
            <param name="ignoreColliders">Whether colliders should be ignored.</param>
            <returns>A list of Player Controls in the radius.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetClosestPlayers(PlayerControl,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the closest players to a specific player.
            </summary>
            <param name="source">The source player.</param>
            <param name="distance">Distance to search in.</param>
            <param name="ignoreColliders">Whether to ignore colliders.</param>
            <param name="ignoreSource">Whether to ignore the source player.</param>
            <returns>A list of PlayerControls.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetClosestPlayers(UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
            Gets the closest players to a specific point.
            </summary>
            <param name="source">The source point.</param>
            <param name="distance">The distance to search in.</param>
            <param name="ignoreColliders">Whether to ignore colliders.</param>
            <returns>A list of Player Controls.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.CreateTextLabel(System.String,UnityEngine.Transform,AspectPosition.EdgeAlignments,UnityEngine.Vector3,System.Single,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a TextMeshPro object with the specified parameters.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="parent">The object parent.</param>
            <param name="alignment">The alignment of the TMP object.</param>
            <param name="distance">The distance from the edge.</param>
            <param name="fontSize">The font size.</param>
            <param name="textAlignment">The text alignment.</param>
            <returns>A new TMP object.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetBodyById(System.Byte)">
            <summary>
            Gets a DeadBody by its parent ID.
            </summary>
            <param name="id">The player ID.</param>
            <returns>A dead body or null if its not found.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.GetSuffix(MiraAPI.Utilities.MiraNumberSuffixes)">
            <summary>
            Gets the suffix for a MiraNumberSuffixes enum.
            </summary>
            <param name="suffix">The MiraNumberSuffixes enum.</param>
            <returns>A suffix based on the enum.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.FirstLetterToUpper(System.String)">
            <summary>
            Converts the first letter of a string to uppercase.
            </summary>
            <param name="str">The string.</param>
            <returns>The fixed string.</returns>
        </member>
        <member name="M:MiraAPI.Utilities.Helpers.RandomString(System.Int32,System.String)">
            <summary>
            Gets a random string based on characters.
            </summary>
            <param name="length">The length of the string.</param>
            <param name="chars">The characters in the random string.</param>
            <returns>The random string.</returns>
        </member>
        <member name="T:MiraAPI.Utilities.ShaderID">
            <summary>
            Utility class for caching shader property IDs.
            </summary>
        </member>
        <member name="T:MiraAPI.Voting.CustomVote">
            <summary>
            Represents a custom vote.
            </summary>
            <param name="Voter">The player that voted.</param>
            <param name="Suspect">The suspect being voted for.</param>
        </member>
        <member name="M:MiraAPI.Voting.CustomVote.#ctor(System.Byte,System.Byte)">
            <summary>
            Represents a custom vote.
            </summary>
            <param name="Voter">The player that voted.</param>
            <param name="Suspect">The suspect being voted for.</param>
        </member>
        <member name="P:MiraAPI.Voting.CustomVote.Voter">
            <summary>The player that voted.</summary>
        </member>
        <member name="P:MiraAPI.Voting.CustomVote.Suspect">
            <summary>The suspect being voted for.</summary>
        </member>
        <member name="T:MiraAPI.Voting.PlayerVoteData">
            <summary>
            Handles player votes, and removing/adding additional votes.
            </summary>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.#ctor(System.IntPtr)">
            <summary>
            Handles player votes, and removing/adding additional votes.
            </summary>
        </member>
        <member name="P:MiraAPI.Voting.PlayerVoteData.Owner">
            <summary>
            Gets the owner of this component.
            </summary>
        </member>
        <member name="P:MiraAPI.Voting.PlayerVoteData.Votes">
            <summary>
            Gets the list of votes the owner has.
            </summary>
        </member>
        <member name="P:MiraAPI.Voting.PlayerVoteData.VotesRemaining">
            <summary>
            Gets or sets the amount of votes the owner has left.
            </summary>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.VotedFor(System.Byte)">
            <summary>
            Returns whether the owner has voted for the specified player.
            </summary>
            <param name="playerId">The target's playerId.</param>
            <returns>True if the owner voted for the specified player, false otherwise.</returns>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.VoteForPlayer(System.Byte)">
            <summary>
            Adds the voted player to the list.
            </summary>
            <param name="playerId">The target's playerId.</param>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.RemovePlayerVote(MiraAPI.Voting.CustomVote)">
            <summary>
            Removes the specified vote.
            </summary>
            <param name="vote">The vote you would like to remove.</param>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.RemovePlayerVote(System.Byte)">
            <summary>
            Removes a single vote from the owner.
            </summary>
            <param name="playerId">The target's playerId.</param>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.SetRemainingVotes(System.Int32)">
            <summary>
            Sets the player's votes remaining.
            </summary>
            <param name="votesRemaining">The amount of votes you would like to set it to.</param>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.IncreaseRemainingVotes(System.Int32)">
            <summary>
            Adds votes to the owner.
            </summary>
            <param name="amount">The amount of votes you would like to add.</param>
        </member>
        <member name="M:MiraAPI.Voting.PlayerVoteData.DecreaseRemainingVotes(System.Int32)">
            <summary>
            Removes votes from the owner.
            </summary>
            <param name="amount">The amount of votes you would like to remove.</param>
        </member>
        <member name="T:MiraAPI.Voting.VotingUtils">
            <summary>
            Utilities used for the Mira voting system.
            </summary>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.GetExiled(System.Collections.Generic.List{MiraAPI.Voting.CustomVote},System.Boolean@)">
            <summary>
            Gets the exiled player from the list of votes. Returns null if no player is to be exiled.
            </summary>
            <param name="votes">>The list of votes to check.</param>
            <param name="isTie">Whether the vote is a tie.</param>
            <returns>The player to be exiled. Will be null if no player is to be exiled.</returns>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.HandleVote(MiraAPI.Voting.PlayerVoteData,System.Byte)">
            <summary>
            Handles when a vote is added and allows for other mods to override/modify.
            </summary>
            <param name="voteData">The player's vote data.</param>
            <param name="suspectIdx">Who the player voted for.</param>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.RpcRemoveVote(PlayerControl,System.Byte,System.Byte)">
            <summary>
            Networks the removal of votes. Used to remove votes when a player disconnects.
            </summary>
            <param name="source">The player who is sending the RPC. Should be the host.</param>
            <param name="voterId">The player who voted.</param>
            <param name="votedFor">The player who the voter voted for.</param>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.CalculateNumVotes(System.Collections.Generic.IEnumerable{MiraAPI.Voting.CustomVote})">
            <summary>
            Calculates the total number of votes.
            </summary>
            <param name="votes">A list of calculated votes.</param>
            <returns>The total votes.</returns>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.CalculateVotes">
            <summary>
            Calculates votes to check if all players have voted.
            </summary>
            <returns>The list of votes.</returns>
        </member>
        <member name="M:MiraAPI.Voting.VotingUtils.HandlePopulateResults(System.Collections.Generic.List{MiraAPI.Voting.CustomVote})">
            <summary>
            Handles the populating of results locally. Called by the PopulateResultsRpc.
            </summary>
            <param name="votes">The list of networked votes.</param>
        </member>
    </members>
</doc>
